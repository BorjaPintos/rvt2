[common]
plugindir:
description.file: ${plugindir}/README.md

[mount]
description: Mount all partitions of a disk image.

    See plugins.common.RVT_mount.Mount module for more parameters.

    Examples:

    - Mount all partitions in an image: `rvt2 --source 01 -j mount`
    - Mount an image with a bitlocker partition: `rvt2 --source 01 -j mount --params recovery_keys=0000-1111-....`

help_section: common
modules:
    plugins.common.RVT_mount.Mount vss={vss} recovery_keys="{recovery_keys}" password="{password}" partitions="{partitions}"
default_params: {
    'vss':False,
    'recovery_keys':'${plugins.common.RVT_mount.Mount:recovery_keys}',
    'password':'${plugins.common.RVT_mount.Mount:password}',
    'partitions':'',
    }
params_help: {
  'path':'ignored. The module mounts `${imagedir}/${source}.extension`, where extension is 001, dd, raw, aff or aff4',
  'partitions':'comma separated list of partitions to mount. Ex: "p03,p05,v1p05"',
  'recovery_keys':'comma separated list of recovery keys for bitlocker encrypted partitions',
  'password':'password for FileVault encrypted volume'}

[umount]
description: Unmount all partitions of a disk image
help_section: common
modules:
    plugins.common.RVT_mount.UMount
default_params: {'mountdir':'${mountdir}'}
params_help: {
  'path':'ignored. The module umounts ${imagedir}/${source}.extension, where extension is 001, dd, raw, aff or aff4',
  'mountdir':'unmount all mounted partitions in mountdir. Can be set on "DEFAULT" configuration option'}

[fs_timeline]
description: Generate a timeline of a filesystem according to MFT.
help_section: common
modules:
    plugins.common.RVT_timelines.Timelines vss={vss} outdir={outdir}
default_params: {'vss':False, 'outdir':'${plugins.common.RVT_timelines.Timelines:outdir}'}
params_help: {
  'path':'ignored. The module uses ${imagedir}/${source}.extension, where extension is 001, dd, raw, aff or aff4',
  'vss':'process Volume Shadow Snapshots',
  'outdir':'Save body and timeline this directory. Many other modules depend on this files. Do not change outdir unless you know what you are doing'}

[allocfiles]
description: Generate allocated files in a disk image
help_section: common
modules:
    plugins.common.RVT_files.Files vss={vss} outdir={outdir}
default_params: {'vss':False, 'outdir':'${plugins.common.RVT_files.Files:outdir}'}
params_help: {
  'vss':'process Volume Shadow Snapshots',
  'outdir':'path to directory where generated files will be stored. Many other modules depend on this files. Do not change outdir unless you know what you are doing'}

[characterize]
description: Describes basic information about disk and partitions.
help_section: common
modules:
    base.templates.TemplateSink template_file='{template_file}' outfile='{outfile}' file_exists='{file_exists}'
    plugins.common.RVT_characterization.CharacterizeDisk
hivesdir: ${plugins.windows:hivesdir}
template_file: templates/disk.mako
outfile: ${analysisdir}/characterize.md
default_params: {'outfile':'${outfile}', 'template_file':'${template_file}', 'file_exists':'OVERWRITE'}
params_help: {
  'outfile':'path to file were results are stored (in markdown format)',
  'template_file':'mako template to display results'}

;;;;;;;;;;;; SEARCH STRINGS

[strings]
description: Extract all strings of printable characters (ascii and unicode) from disk data.
  Output files are organized by partition, encoding and allocation status
help_section: common
modules:
  plugins.common.RVT_string.StringGenerate outdir={outdir}
default_params: {'outdir':'${plugins.common.RVT_string.StringGenerate:outdir}'}
params_help: {
  'outdir':'path to directory where generated files will be stored'}

[search_strings]
description: Search a predefined set of keywords in an image strings.

  The list of keywords must be defined in a separated file, including the
  keyword label and (optionally) a regex as "LABEL:::REGEX".  If the regex is
  not provided, the modules uses the label as the regex to search.

  Example of keyword file:

  ```
  myfirstword
  mysecondword:::[Mm]y.econd{1,2}word
  ```

help_section: common
jobs:
  plugins.common.RVT_search.StringSearch keyfile='{keyfile}' outdir='{outdir}' strings_dir='{strings_dir}'
  plugins.common.RVT_search.ReportSearch keyfile='{keyfile}' outdir='{outdir_report}' search_dir='{outdir}'
; path: ${casedir}/searches_files/keywords
keyfile: ${casedir}/searches_files/keywords
default_params: {'keyfile':'${keyfile}', 'outdir':'${plugins.common.RVT_search.StringSearch:outdir}',\
  'outdir_report':'${plugins.common.RVT_search.ReportSearch:outdir}',\
  'strings_dir':'${plugins.common.RVT_string.StringGenerate:outdir}'}
params_help: {
  'path': 'Path to file containing the list of keywords to perform the search on',
  'keyfile': 'Same as *path*. *path* will have precendence if both are defined',
  'outdir': 'Path to directory where generated match files will be stored',
  'outdir_report': 'Path to directory where generated report files will be stored',
  'strings_dir': 'Path to directory where generated string files should be stored. See job "strings"'}

[search_email]
description: Search emails patterns in strings
help_section: common
modules:
  plugins.common.RVT_search.SearchEmailAddresses outdir={outdir}
default_params: {'outdir':'${plugins.common.RVT_search.SearchEmailAddresses:outdir}'}
params_help: {'outdir':'path to directory where generated files will be stored'}

[search_accounts]
description: Search account patterns in strings
help_section: common
modules:
  plugins.common.RVT_search.SearchAccounts outdir={outdir}
default_params: {'outdir':'${plugins.common.RVT_search.SearchAccounts:outdir}'}
params_help: {'outdir':'path to directory where generated files will be stored'}

[search_gmail]
description: Search gmail specific parameters in strings
help_section: common
modules:
  plugins.common.RVT_gmail_mailbox.Gmail outdir={outdir}
default_params: {'outdir':'${plugins.common.RVT_gmail_mailbox.Gmail:outdir}'}
params_help: {'outdir':'path to directory where generated files will be stored'}

[search_output]
description: Search regular expressions in a source output directories, except for strings, searches and parser folders.
help_section: common
modules:
  plugins.common.RVT_search.OutSearch keyfile='{keyfile}' outdir='{outdir}'
keyfile: ${casedir}/searches_files/keywords
default_params: {'keyfile':'${keyfile}', 'outdir':'${plugins.common.RVT_search.OutSearch:outdir}'}
params_help: {
  'path':'path to file containing the list of keywords to perform the search on',
  'keyfile':'same as *path*. *path* will have precendence if both are defined',
  'outdir':'path to directory where generated files will be stored'}

;;;;;;;;;;;;; BROWSERS

[browsers]
description: Parse history, downloads and cookies from most used browsers: Chrome, Firefox, Safari, Edge, InternetExplorer
  When parsing VSS, please introduce the corresponding `outdir` and `vss=False`
; yet to implement a way to refer to outdir. Now it does not work on vss
help_section: common
jobs:
  base.directory.DirectoryClear target={outdir}
  browsers.main vss={vss} outdir={outdir}
  browsers.history outdir={outdir}
  browsers.downloads outdir={outdir}
  browsers.cookies outdir={outdir}
default_params: {'vss':False, 'outdir':'${plugins.common.RVT_browsers.Firefox:outdir}'}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'vss':'process Volume Shadow Snapshots'}

[browsers.history]
modules:
  base.commands.Command cmd="mv /tmp/browserstemp {outfile}"
  base.commands.Command cmd="awk 'NR == 1; NR > 1 {{{{print $$0 | \"sort -n\"}}}}' {outfile}" stdout="/tmp/browserstemp"
  base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="last_visit url title visit_count visit_type type_description visit_duration visit_date modified last_checked redirect_urls browser partition user"
  base.input.JSONReader
outdir: ${plugins.common.RVT_browsers.Firefox:outdir}
default_params: {'vss':False, 'outfile':'${outdir}/history.csv'}
path: ${outdir}/history.json

[browsers.downloads]
modules:
  base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="url path size end start modified date_added content bytes_so_far total_to_load browser partition user"
  base.input.JSONReader
outdir: ${plugins.common.RVT_browsers.Firefox:outdir}
path: ${outdir}/downloads.json
default_params: {'vss':False, 'outfile':'${outdir}/downloads.csv'}

[browsers.cookies]
modules:
  base.commands.Command cmd="mv /tmp/browserstemp {outfile}"
  base.commands.Command cmd="awk 'NR == 1; NR > 1 {{{{print $$0 | \"sort -n\"}}}}' {outfile}" stdout="/tmp/browserstemp"
  base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="accessed creation expires url cookie_name cookie_value path flag browser partition user"
  base.input.JSONReader
outdir: ${plugins.common.RVT_browsers.Firefox:outdir}
default_params: {'vss':False, 'outfile':'${outdir}/cookies.csv'}
path: ${outdir}/cookies.json

[browsers.main]
modules:
  plugins.common.RVT_files.SendAllocFiles vss={vss}
  browsers.parser outdir={outdir}
default_params: {'vss':False, 'outdir':'${plugins.common.RVT_browsers.Firefox:outdir}'}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'vss':'process Volume Shadow Snapshots'}

[browsers.parser]
description: Call different parsers for different browsers databases
inherits = base.directory.FileParser
parsers =
  ".*(Google/Chrome|/chromium|\.chrome).*/History$$" browsers.chrome.history
  ".*(Google/Chrome|/chromium|\.chrome).*/History$$" browsers.chrome.downloads
  ".*(Google/Chrome|/chromium|\.chrome).*/Cookies$$" browsers.chrome.cookies
  ".*/places.sqlite$$" browsers.firefox.history
  ".*/places.sqlite$$" browsers.firefox.downloads
  ".*/cookies.sqlite$$" browsers.firefox.cookies
  ".*/WebCacheV0[12].dat$$" browsers.edge.history
  ".*/WebCacheV0[12].dat$$" browsers.edge.cookies
  ".*/History/History.IE5/(Low/|MSHist[\d*]/)?index.dat$$" browsers.internet_explorer
  ".*/(Library|Apple Computer)/Safari/History.db$$" browsers.safari.history_db
  ".*/(Library|Apple Computer)/Safari/History.plist$$" browsers.safari.history_plist
  ".*/(Library|Apple Computer)/Safari/Downloads.plist$$" browsers.safari.downloads
  ".*/(Library|Apple Computer)/Cookies/Cookies.binarycookies$$" browsers.safari.cookies

[browsers.chrome.history]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Chrome:outdir}/history.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"chrome"}}}}'
	base.input.SQLiteReader read_only=True
query =
  SELECT DATETIME(visits.visit_time/1000000-11644473600,'unixepoch') AS visit_date,
  DATETIME(urls.last_visit_time/1000000-11644473600,'unixepoch') AS last_visit,
  urls.url AS url,
  REPLACE(urls.title,'|','/') AS title,
  urls.visit_count AS visit_count,
  visits.visit_duration AS visit_duration,
  visits.transition & 255 AS visit_type,
  CASE (visits.transition & 255)
  WHEN 0 THEN 'User clicked a link'
  WHEN 1 THEN 'User typed the URL in the URL bar'
  WHEN 2 THEN 'Got through a suggestion in the UI'
  WHEN 3 THEN 'Content automatically loaded in a non-toplevel frame - user may not realize'
  WHEN 4 THEN 'Subframe explicitly requested by the user'
  WHEN 5 THEN 'User typed in the URL bar and selected an entry from the list - such as a search bar'
  WHEN 6 THEN 'The start page of the browser'
  WHEN 7 THEN 'A form the user has submitted values to'
  WHEN 8 THEN 'The user reloaded the page, eg by hitting the reload button or restored a session'
  WHEN 9 THEN 'URL what was generated from a replacable keyword other than the default search provider'
  WHEN 10 THEN 'Corresponds to a visit generated from a KEYWORD' END AS type_description
  FROM urls, visits WHERE urls.id = visits.url

[browsers.chrome.downloads]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Chrome:outdir}/downloads.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"chrome"}}}}'
	base.input.SQLiteReader read_only=True
query =
  SELECT DATETIME(downloads.end_time/1000000-11644473600,'unixepoch') AS end,
  DATETIME(downloads.start_time/1000000-11644473600,'unixepoch') AS start,
  downloads.referrer AS url,
  downloads.target_path AS path,
  downloads.total_bytes AS size
  FROM downloads ORDER BY downloads.end_time

[browsers.chrome.cookies]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Chrome:outdir}/cookies.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"chrome"}}}}'
	base.input.SQLiteReader read_only=True
query =
  SELECT DATETIME(last_access_utc/1000000-11644473600,'unixepoch') AS accessed,
  DATETIME(creation_utc/1000000-11644473600,'unixepoch') AS creation,
  host_key AS url,
  name AS cookie_name,
  value AS cookie_value
  FROM cookies

[browsers.firefox.history]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Firefox:outdir}/history.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"firefox"}}}}'
	base.input.SQLiteReader read_only=True
query =
  SELECT DATETIME(moz_places.last_visit_date/1000000,'unixepoch') AS last_visit,
  moz_places.url,
  moz_places.title,
  moz_places.visit_count,
  moz_historyvisits.visit_type,
  CASE (moz_historyvisits.visit_type)
  WHEN 1 THEN 'The user followed a link and got a new toplevel window'
  WHEN 2 THEN 'The user typed the pages URL in the URL bar or selected it from URL bar autocomplete results, clicked on it from a history query (from the History sidebar, History menu, or history query in the personal toolbar or Places organizer'
  WHEN 3 THEN 'The user followed a bookmark to get to the page'
  WHEN 4 THEN 'Some inner content is loaded'
  WHEN 5 THEN 'Permanent redirect'
  WHEN 6 THEN 'Temporary redirect'
  WHEN 7 THEN 'Download'
  WHEN 8 THEN 'The user followed a link and got a visit in a frame'
  WHEN 9 THEN 'The page has been reloaded'
  END AS type_description
  FROM moz_places JOIN moz_historyvisits ON moz_historyvisits.place_id=moz_places.id

[browsers.firefox.downloads]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Firefox:outdir}/downloads.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"firefox"}}}}'
	base.input.SQLiteReader read_only=True
query =
  SELECT DATETIME(moz_annos.lastModified/1000000, 'unixepoch') as modified,
  DATETIME(moz_annos.dateAdded/1000000, 'unixepoch') as date_added,
  moz_annos.content,
  moz_places.url
  FROM moz_annos JOIN moz_places
  WHERE moz_annos.place_id == moz_places.id
  AND anno_attribute_id ==
  (SELECT moz_anno_attributes.id FROM moz_anno_attributes
  	WHERE moz_anno_attributes.name LIKE "downloads/destinationFileURI")
  ORDER BY moz_annos.lastModified DESC

[browsers.firefox.cookies]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Firefox:outdir}/cookies.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"firefox"}}}}'
	base.input.SQLiteReader read_only=True
query =
  SELECT DATETIME(lastAccessed/1000000,'unixepoch') AS accessed,
  DATETIME(creationTime/1000000,'unixepoch') AS creation,
  host as url,
  name AS cookie_name,
  value As cookie_value
  FROM moz_cookies

[browsers.edge.history]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Chrome:outdir}/history.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"edge"}}}}'
	plugins.common.RVT_browsers.Edge information='history'

[browsers.edge.cookies]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Chrome:outdir}/cookies.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"edge"}}}}'
	plugins.common.RVT_browsers.Edge information='cookies'

[browsers.internet_explorer]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Chrome:outdir}/history.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"ie"}}}}'
	plugins.common.RVT_browsers.InternetExplorer

[browsers.safari.history_db]
modules =
;	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Safari:outdir}/history.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"safari"}}}}'
	base.input.SQLiteReader read_only=True
query =
  SELECT DATETIME(v.visit_time + 978307200, 'unixepoch') as last_visit,
  i.url,
  v.title
  FROM history_items i LEFT JOIN history_visits v ON i.id = v.history_item
  ORDER BY v.visit_time DESC

[browsers.safari.history_plist]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Safari:outdir}/history.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"safari"}}}}'
	plugins.common.RVT_browsers.Safari information='history'

[browsers.safari.downloads]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Safari:outdir}/downloads.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"safari"}}}}'
	plugins.common.RVT_browsers.Safari information='downloads'

[browsers.safari.cookies]
modules =
	base.output.JSONSink file_exists=APPEND outfile="${plugins.common.RVT_browsers.Safari:outdir}/cookies.json"
  plugins.common.ExtractPathTerms section='browsers.parameters'
  base.mutations.AddFields section='browsers.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}", "browser":"safari"}}}}'
	plugins.common.RVT_browsers.Safari information='cookies'

;;;;;;;;;;;; MAILS

[characterize_mails]
description: Create basic summary about mail accounts from a source.

  Includes:
    - Number of mails sended or received to/for every mail account found
    - Number of mails interchanged between every pair of mail accounts
help_section: common
modules:
    base.output.CSVSink outfile='{outfile}' file_exists=OVERWRITE
    plugins.common.RVT_mails.CharacterizeMails n='{n}' summary_file='{summary_file}'
    plugins.common.RVT_mails.FilterMails
    base.input.CSVReader
default_params: {'n':'50', 'summary_file':'${analysisdir}/mail/summary_mails.md', 'outfile':'${analysisdir}/mail/mail_accounts.csv'}
path: ${analysisdir}/mail/mailbox.csv
params_help: {
  'path':'path to a previously generated csv describing all mails. See "indexer.pst" job',
  'outfile':'output file with statistics for every mail account',
  'summary_file':'output file for the summary',
  'n':'number of top occurences to show'}

;;;;;;;;;;; SKYPE, TEAMS (leveldb)

[leveldb]
description: Dumps leveldb
modules:
  plugins.common.ExtractPathTerms section='generic.parameters'
  plugins.common.RVT_skype.GenericLevelDB outdir='{outdir}'
path:
default_params: {'vss':False, 'outdir':'${plugins.common.RVT_skype.GenericLevelDB:outdir}'}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'vss':'process Volume Shadow Snapshots'}

[skype]
description: Extract contacts, messages, calls from Skype databases
help_section: common
modules:
  plugins.common.RVT_files.SendAllocFiles vss={vss}
  skype.parser
default_params: {'vss':False, 'outdir':'${plugins.common.RVT_skype.Skype:outdir}'}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'vss':'process Volume Shadow Snapshots'}

[skype.parser]
description: Call different parsers for different database formats related to skype versions
inherits = base.directory.FileParser
parsers = ".*/AppData/Roaming/Microsoft/Skype for Desktop/(Local Storage|IndexedDB)/.*leveldb$$" skype.leveldb
  .*/AppData/Roaming/Skype/.*/main.db$$ skype.maindb
  .*\.skype.*/main.db$$ skype.maindb

[skype.leveldb]
modules:
  plugins.common.ExtractPathTerms section='skype.parameters'
  plugins.common.RVT_skype.Skype

[skype.maindb]
description: Auxiliary job to call all queries to skype main.db
help_section: common
jobs:
  skype.maindb_calls
  skype.maindb_messages
  skype.maindb_conversations
  skype.maindb_transfers
  skype.maindb_profiles

[skype.maindb_conversations]
modules =
	base.output.CSVSink file_exists=APPEND outfile="${plugins.common.RVT_skype.Skype:outdir}/conversations.csv"
  plugins.common.ExtractPathTerms section='skype.parameters'
  base.mutations.AddFields section='skype.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}"}}}}'
	base.input.SQLiteReader
query =
  SELECT DATETIME(timestamp, 'unixepoch') AS start,
  author,
  dialog_partner AS receiver,
  body_xml AS message
  FROM Messages

[skype.maindb_calls]
modules =
	base.output.CSVSink file_exists=APPEND outfile="${plugins.common.RVT_skype.Skype:outdir}/calls.csv"
  plugins.common.ExtractPathTerms section='skype.parameters'
  base.mutations.AddFields section='skype.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}"}}}}'
	base.input.SQLiteReader
query =
  SELECT DATETIME(start_timestamp, 'unixepoch') AS start,
  guid AS source,
  identity AS destination,
  call_duration
  FROM CallMembers
  UNION
  SELECT DATETIME(begin_timestamp, 'unixepoch') as start_time,
  host_identity as source,
  current_video_audience as destination,
  duration
  FROM Calls

[skype.maindb_messages]
modules =
	base.output.CSVSink file_exists=APPEND outfile="${plugins.common.RVT_skype.Skype:outdir}/messages.csv"
  plugins.common.ExtractPathTerms section='skype.parameters'
  base.mutations.AddFields section='skype.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}"}}}}'
	base.input.SQLiteReader
query =
  SELECT DATETIME(timestamp, 'unixepoch') as start_time,
  author as source,
  chatname,
  body_xml as message
  FROM Messages

[skype.maindb_transfers]
modules =
	base.output.CSVSink file_exists=APPEND outfile="${plugins.common.RVT_skype.Skype:outdir}/transfers.csv"
  plugins.common.ExtractPathTerms section='skype.parameters'
  base.mutations.AddFields section='skype.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}"}}}}'
	base.input.SQLiteReader
query =
  SELECT DATETIME(starttime, 'unixepoch') AS start,
  (partner_handle || '/' || partner_dispname) AS file_receiver_container,
  filepath,
  filename,
  filesize
  FROM Transfers

[skype.maindb_profiles]
modules =
	base.output.CSVSink file_exists=APPEND outfile="${plugins.common.RVT_skype.Skype:outdir}/profiles.csv"
  plugins.common.ExtractPathTerms section='skype.parameters'
  base.mutations.AddFields section='skype.parameters' fields='{{{{"partition":"{{partition}}", "user":"{{user}}"}}}}'
	base.input.SQLiteReader
query =
  SELECT fullname,
  skypename,
  emails,
  country,
  city,
  languages,
  DATETIME(profile_timestamp, 'unixepoch') AS last_profile_edition,
  DATETIME(avatar_timestamp, 'unixepoch') AS last_avatar_edition,
  DATETIME(registration_timestamp, 'unixepoch') AS registration_date
  FROM accounts

[teams]
description: Extract contacts, messages, calls from Teams databases
help_section: common
modules:
  plugins.common.RVT_files.SendAllocFiles vss={vss}
  teams.parser
default_params: {'vss':False, 'outdir':'${plugins.common.RVT_skype.Teams:outdir}'}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'vss':'process Volume Shadow Snapshots'}

[teams.parser]
description: Call different parsers for different database formats related to teams versions
inherits = base.directory.FileParser
parsers = ".*/AppData/Roaming/Microsoft/Teams/(Local Storage|IndexedDB)/.*leveldb$$" teams.leveldb

[teams.leveldb]
modules:
  plugins.common.ExtractPathTerms section='teams.parameters'
  plugins.common.RVT_skype.Teams

;;;;;;;;;;; Mystery

[solve_case]
module: plugins.common.case_solve.Case_Solve
