[android.common]
androiddir: ${outputdir}/android

[android.whatsapp.WhatsApp]
module: android.whatsapp.WhatsApp
media_outdir: ${outputdir}/whatsapp

[FileParser.android.databases]
module: base.directory.FileParser
parsers:
    (.*/data/com\.android\.providers\.contacts/databases/contacts2\.db$$) FileParser.android.contacts
    (.*/data/com\.google\.android\.gms/databases/pluscontacts\.db$$) FileParser.android.contacts_plus
    (.*/data/com\.android\.providers\.contacts/databases/calllog\.db$$) FileParser.android.calls
    (.*/system/.*accounts.*\.db$$) FileParser.android.accounts
    (.*/data/com\.android\.providers\.calendar/databases/calendar\.db$$)FileParser.android.calendar
    (.*/com\.android\.providers\.downloads/databases/downloads\.db$$) FileParser.android.downloads
    (.*/data/com\.android\.vending/databases/localappstate\.db$$) FileParser.android.applications_state
    (.*/data/com\.android\.vending/databases/library\.db$$) FileParser.android.library
    (.*/data/com\.google\.android\.gms/databases/NetworkUsage\.db$$) FileParser.android.network_usage
    (.*/data/com\.google\.android\.gms/databases/config\.db$$) FileParser.android.config
    (.*/data/com\.android\.providers\.telephony/databases/mmssms\.db$$) FileParser.android.sms

[FileParser.android.contacts]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/contacts.csv"
    base.input.SQLiteReader
query: SELECT
    raw_contacts._id,
    raw_contacts.display_name,
    phone_lookup.normalized_number,
    search_index.content,
    accounts.account_name
    FROM contacts JOIN search_index ON contacts._id = search_index.contact_id
    JOIN raw_contacts ON contacts.name_raw_contact_id = raw_contacts._id
    JOIN accounts ON raw_contacts.account_id = accounts._id
    LEFT JOIN phone_lookup ON phone_lookup.raw_contact_id = raw_contacts._id

[FileParser.android.contacts_plus]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/contacts_plus.csv"
    base.input.SQLiteReader
query: SELECT
		v.contact_id,
		v.display_name,
		v.value,
		DATETIME(p.last_update_time, 'unixepoch') AS last_updated
		FROM ac_main_query_view v
		JOIN ac_people p ON v.v2_id = p.people_v2_id

[FileParser.android.calls]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/calls.csv"
    base.input.SQLiteReader
query: SELECT
    DATETIME(date/1000, 'unixepoch') AS date,
    number,
    name,
    duration,
    CASE type
    		WHEN 1 THEN "incoming"
    		WHEN 2 THEN "outgoing"
    		WHEN 3 THEN "incoming missed"
    		ELSE "unknown"
	  END AS type,
    geocoded_location
    FROM
    calls

[FileParser.android.accounts]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/accounts.csv"
    base.input.SQLiteReader
query: SELECT
    DATETIME(last_password_entry_time_millis_epoch/1000, 'unixepoch') AS timestamp,
    type,
    name,
    extras.value AS nick_name,
    password
    FROM accounts LEFT JOIN extras
    ON accounts._id = extras.accounts_id
    AND (extras.key == "nickname")

[FileParser.android.calendar]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/calendar.csv"
    base.input.SQLiteReader
query: SELECT
  	DATETIME(e.dtstart/1000, 'unixepoch') AS start,
  	e.title,
  	e.eventLocation AS location,
  	e.organizer,
  	e.hasAlarm AS alarm,
  	c.name AS calendar,
  	e.deleted,
  	DATETIME(e.createTime/1000, 'unixepoch') AS created
  	FROM Events e JOIN Calendars c
  	ON e.calendar_id = c._id

[FileParser.android.downloads]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/downloads.csv"
    base.input.SQLiteReader
query: SELECT
    DATETIME(lastmod/1000, 'unixepoch') AS last_modified,
    _data AS path,
    title,
    total_bytes,
    mimetype,
    mediaprovider_uri,
    deleted
    FROM downloads

[FileParser.android.applications_state]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/applications_state.csv"
    base.input.SQLiteReader
query: SELECT
    package_name,
    title,
    last_notified_version AS version,
    DATETIME(first_download_ms/1000, 'unixepoch') AS first_downloaded,
    DATETIME(delivery_data_timestamp_ms/1000, 'unixepoch') AS delivery_date,
    DATETIME(last_update_timestamp_ms/1000, 'unixepoch') AS last_update,
    DATETIME(install_request_timestamp_ms/1000, 'unixepoch') AS install_request,
    persistent_flags,
    auto_update,
    account
    FROM appstate
    ORDER BY first_downloaded DESC

[FileParser.android.network_usage]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/network_usage.csv"
    base.input.SQLiteReader
query: SELECT
  	DATETIME(datetime_updated/1000, 'unixepoch') AS timestamp,
  	iface AS interface,
  	rxbytes AS "down_bytes",
  	txbytes AS "up_bytes",
  	device_state,
  	tag
  	FROM
  	network_raw_entry

[FileParser.android.config]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/config.csv"
    base.input.SQLiteReader
query: SELECT * FROM main

[FileParser.android.library]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/library.csv"
    base.input.SQLiteReader
query: SELECT
    DATETIME(purchase_time/1000, 'unixepoch') as purchase_date,
    doc_id,
    app_certificate_hash,
    account
    FROM ownership
    ORDER BY purchase_date DESC

[FileParser.android.sms]
modules:
    base.output.CSVSink file_exists=OVERWRITE outfile="${android.common:androiddir}/sms.csv"
    base.input.SQLiteReader
query: SELECT
    DATETIME(date/1000, 'unixepoch') AS date,
    address,
    person,
    read,
    seen,
    body AS message,
    service_center
    FROM sms_restricted
