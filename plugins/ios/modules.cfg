[ios.common]
auxdir: ${outputdir}/auxdir
timelinesdir: ${outputdir}/timeline
iosdir: ${outputdir}/ios
mountauxdir: ${sourcedir}/mnt/auxdir

[ios.whatsapp.WhatsApp]
inherits: ios.common
module: ios.whatsapp.WhatsApp
media_outdir: ${outputdir}/whatsapp

[ios.adv_whatsapp.AdvWhatsapps]
inherits: ios.common
module: ios.adv_whatsapp.AdvWhatsapps
outfile: ${ios.common:iosdir}/adv_whatsapp.txt

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Database parsers not in the APOLLO project

[FileParser.ios.databases]
module: base.directory.FileParser
parsers:
    (.*/AddressBook.sqlitedb$$) FileParser.ios.addressbook
    (.*/applicationState.db$$) FileParser.ios.applicationstate
    (.*/Safari/Bookmarks.db$$) FileParser.ios.safaribookmarks
    (.*/Safari/History.db$$) FileParser.ios.safarihistory
    (.*/Safari/BrowserState.db$$) FileParser.ios.safaristate
    (.*/Calendar.sqlitedb$$) FileParser.ios.calendar
    (.*/Recordings.db$$) FileParser.ios.recordings
    (.*/Notes/notes.sqlite$$) FileParser.ios.notes
    (.*/DataUsage.sqlite$$) FileParser.ios.datausage
    (.*/locationd/consolidated.db$$) FileParser.ios.locationd
    (.*/HomeDomain/Library/Mail/Recents$$) FileParser.ios.recents

[FileParser.ios.addressbook]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/addressbook.csv"
  base.input.SQLiteReader
query:
    SELECT
    datetime(ABPerson.CreationDate+978307200, 'unixepoch') as CreationDateUTC,
    datetime(ABPerson.ModificationDate+978307200, 'unixepoch') as ModificationDateUTC,
    ABPerson.First,
    ABPerson.Last,
    ABMultiValue.value
    from ABPerson
    INNER JOIN ABMultiValue on ABMultiValue.record_id = ABPerson.ROWID

[FileParser.ios.applicationstate]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/applicationstate.csv"
  base.input.SQLiteReader
query: SELECT id, application_identifier from application_identifier_tab

[FileParser.ios.safaribookmarks]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/safaribookmarks.csv"
  base.input.SQLiteReader
query:
  SELECT
  datetime(last_modified+978307200, 'unixepoch') as LASTMODIFIEDUTC,
  title, url, hidden, syncable, external_uuid from bookmarks

[FileParser.ios.safarihistory]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/safarihistory.csv"
  base.input.SQLiteReader
query:
  SELECT
  datetime(history_visits.visit_time+978307200, 'unixepoch') as TIMESTAMPUTC,
  history_visits.title, history_items.domain_expansion, history_items.url, history_items.visit_count, history_visits.origin
  from history_visits inner join history_items on history_visits.history_item = history_items.id

[FileParser.ios.safaristate]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/safaristate.csv"
  base.input.SQLiteReader
query:
  SELECT
  datetime(last_viewed_time+978307200, 'unixepoch') as TIMESTAMPUTC,
  title, url, user_visible_url, private_browsing, uuid from tabs

[FileParser.ios.calendar]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/calendar.csv"
  base.input.SQLiteReader
query:
  SELECT
      datetime(CalendarItem.start_date+978307200, 'unixepoch') as StartDateUTC,
      datetime(CalendarItem.end_date+978307200, 'unixepoch') as EndDateUTC,
      Calendar.title, CalendarItem.summary, Calendar.shared_owner_name, Calendar.shared_owner_email, Calendar.sharing_status from Calendar
  INNER JOIN CalendarItem on Calendar.ROWID = CalendarItem.calendar_id
;       Calendar.title, CalendarItem.summary, Calendar.shared_owner_name, Calendar.shared_owner_address, Calendar.sharing_status from Calendar

[FileParser.ios.recordings]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/recordings.csv"
  base.input.SQLiteReader
query:
  SELECT Z_PK,
  datetime(ZDATE+978307200, 'unixepoch') as TIMESTAMPUTC,
  ZDURATION, ZCUSTOMLABEL, ZPATH, Z_ENT, Z_OPT, ZITUNESPERSISTENTID, ZLABELPRESET, ZPENDINGRESTORE, ZRECORDINGID, ZSYNCED
  from ZRECORDING

[FileParser.ios.notes]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/notes.csv"
  base.input.SQLiteReader
query:
  SELECT
  datetime(ZNOTE.ZCREATIONDATE+978307200, 'unixepoch') as CreationDateUTC,
  datetime(ZNOTE.ZMODIFICATIONDATE+978307200, 'unixepoch') as ModificationDateUTC,
  ZNOTE.ZTITLE, ZNOTEBODY.ZCONTENT from ZNOTE
  INNER JOIN ZNOTEBODY on ZNOTE.Z_PK = ZNOTEBODY.Z_PK

[FileParser.ios.datausage]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/datausage.csv"
  base.input.SQLiteReader
query:
  SELECT
  zprocess.zprocname, zliveusage.zwifiin, zliveusage.zwifiout, zliveusage.zwwanin, zliveusage.zwwanout,
  datetime(zliveusage.ztimestamp+978307200, 'unixepoch') as TIMESTAMPUTC
  FROM zliveusage
  INNER JOIN zprocess on zprocess.z_pk = zliveusage.zhasprocess order by TIMESTAMPUTC desc

[FileParser.ios.locationd]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/locationd.csv"
  base.input.SQLiteReader
query:
  SELECT
  datetime(Timestamp+978307200, 'unixepoch') as TIMESTAMPUTC,
  MagneticX, MagneticY, MagneticZ, BiasX, BiasY, BiasZ, Level, Magnitude, Inclination, MagnitudeStd, InclinationStd, Count from ClusterCompassCalibration

[FileParser.ios.recents]
modules:
  base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/recents.csv"
  base.input.SQLiteReader
query:
  SELECT
  datetime(recents.last_date/1000, 'unixepoch') as TIMESTAMP,
  contacts.kind, recents.display_name, contacts.address, recents.sending_address, recents.record_hash from recents
  INNER JOIN contacts on recents.ROWID = contacts.recent_id ORDER by contacts.kind
