; AUTOMATICALLY GENERATED FROM THE APOLLO PROJECT USING apollo2rvt2.py
; https://github.com/mac4n6/APOLLO.git

[FileParser.ios.powerlog_audio_routing]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_audio_routing.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Power Log Audio Output (ie: Speaker/CarAudioOutput/HeadphonesBT) of different categories (ie: Audio/Video, VoiceCommand, MediaPlayback).
query = 
	SELECT
	DATETIME(AUDIOROUTE_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	ACTIVEROUTE,
	CASE ACTIVE
	WHEN "0" THEN "NO"
	WHEN "1" THEN "YES"
	END "ACTIVE",
	ACTIVEPID AS "ACTIVE PID",
	OUTPUTCATEGORY AS "OUTPUT CATEGORY",
	HEADSETHASINPUT AS "HEADSET HAS INPUT",
	HEADPHONESCONNECTED AS "HEADPHONES CONNECTED",
	DATETIME(AUDIOROUTE_TIMESTAMP, 'unixepoch') AS ORIGINAL_AUDIOROUTE_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	AUDIOROUTE_ID AS "PLAUDIOAGENT_EVENTFORWARD_ROUTING TABLE ID"
	FROM
	(
	SELECT
	AUDIOROUTE_ID,
	AUDIOROUTE_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	ACTIVEROUTE,
	ACTIVE,
	ACTIVEPID,
	OUTPUTCATEGORY,
	HEADSETHASINPUT,
	HEADPHONESCONNECTED,
	SYSTEM
	FROM
	(
	SELECT
	PLAUDIOAGENT_EVENTFORWARD_ROUTING.TIMESTAMP AS AUDIOROUTE_TIMESTAMP,
	ACTIVEROUTE,
	ACTIVE,
	ACTIVEPID,
	OUTPUTCATEGORY,
	HEADSETHASINPUT,
	HEADPHONESCONNECTED,
	PLAUDIOAGENT_EVENTFORWARD_ROUTING.ID AS "AUDIOROUTE_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLAUDIOAGENT_EVENTFORWARD_ROUTING
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS AUDIOROUTE_STATE
	GROUP BY
	AUDIOROUTE_ID
	)

[FileParser.ios.health_heart_rate]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/health_heart_rate.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Health Heart Rate
query = 
	SELECT
	ORIGINAL_QUANTITY AS "HEART RATE",
	UNIT_STRINGS.UNIT_STRING as "UNITS",
	QUANTITY AS "QUANTITY",
	DATETIME(SAMPLES.START_DATE + 978307200, 'unixepoch') AS "DATE",
	SAMPLES.DATA_ID AS "SAMPLES TABLE ID"
	FROM
	SAMPLES
	LEFT OUTER JOIN
	QUANTITY_SAMPLES
	ON SAMPLES.DATA_ID = QUANTITY_SAMPLES.DATA_ID
	LEFT OUTER JOIN
	UNIT_STRINGS
	ON QUANTITY_SAMPLES.ORIGINAL_UNIT = UNIT_STRINGS.ROWID
	WHERE
	SAMPLES.DATA_TYPE = 5

[FileParser.ios.call_history]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/call_history.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Call History
query = 
	SELECT
	CAST(ZADDRESS AS TEXT) AS "ADDRESS",
	ZANSWERED AS "WAS ANSWERED",
	ZCALLTYPE AS "CALL TYPE",
	ZORIGINATED AS "ORIGINATED",
	ZDURATION AS "DURATION (IN SECONDS)",
	ZISO_COUNTRY_CODE as "ISO COUNTY CODE",
	ZLOCATION AS "LOCATION",
	ZSERVICE_PROVIDER AS "SERVICE PROVIDER",
	DATETIME(ZDATE+978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM ZCALLRECORD

[FileParser.ios.sms_chat_message_delivered]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/sms_chat_message_delivered.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = SMS and Chat Messages, when the message was delivered.
query = 
	SELECT
	CASE
	WHEN LENGTH(MESSAGE.DATE)=18 THEN DATETIME(MESSAGE.DATE/1000000000+978307200,'UNIXEPOCH')
	WHEN LENGTH(MESSAGE.DATE)=9 THEN DATETIME(MESSAGE.DATE + 978307200,'UNIXEPOCH')
	ELSE "N/A"
	END "DATE",
	CASE
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=18 THEN DATETIME(MESSAGE.DATE_DELIVERED/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=9 THEN DATETIME(MESSAGE.DATE_DELIVERED+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE DELIVERED",
	CASE
	WHEN LENGTH(MESSAGE.DATE_READ)=18 THEN DATETIME(MESSAGE.DATE_READ/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_READ)=9 THEN DATETIME(MESSAGE.DATE_READ+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE READ",
	MESSAGE.TEXT as "MESSAGE",
	HANDLE.ID AS "CONTACT ID",
	MESSAGE.SERVICE AS "SERVICE",
	MESSAGE.ACCOUNT AS "ACCOUNT",
	MESSAGE.IS_DELIVERED AS "IS DELIVERED",
	MESSAGE.IS_FROM_ME AS "IS FROM ME",
	ATTACHMENT.FILENAME AS "FILENAME",
	ATTACHMENT.MIME_TYPE AS "MIME TYPE",
	ATTACHMENT.TRANSFER_NAME AS "TRANSFER TYPE",
	ATTACHMENT.TOTAL_BYTES AS "TOTAL BYTES"
	FROM MESSAGE
	LEFT OUTER JOIN MESSAGE_ATTACHMENT_JOIN ON MESSAGE.ROWID = MESSAGE_ATTACHMENT_JOIN.MESSAGE_ID
	LEFT OUTER JOIN ATTACHMENT ON MESSAGE_ATTACHMENT_JOIN.ATTACHMENT_ID = ATTACHMENT.ROWID
	LEFT OUTER JOIN HANDLE ON MESSAGE.HANDLE_ID = HANDLE.ROWID
	WHERE "DATE DELIVERED" IS NOT "N/A"

[FileParser.ios.powerlog_device_telephony_registration]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_device_telephony_registration.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Records telephony registration details such as carrier and service.
query = 
	SELECT
	DATETIME(TELEPHONYREG_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	DATAIND AS "SERVICE",
	OPERATOR AS "OPERATOR",
	STATUS AS "STATUS",
	CELLID AS "CELL ID",
	DATAACTIVE AS "DATA ACTIVE",
	DATAATTACHED AS "DATA ATTACHED",
	HOME AS "HOME",
	LAC AS "LAC",
	DATETIME(TELEPHONYREG_TIMESTAMP, 'unixepoch') AS ORIGINAL_TELEPHONYREG_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	TELEPHONYREG_ID AS "PLBBAGENT_EVENTFORWARD_TELEPHONYREGISTRATION TABLE ID"
	FROM
	(
	SELECT
	TELEPHONYREG_ID,
	TELEPHONYREG_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	DATAIND,
	OPERATOR,
	STATUS,
	CELLID,
	DATAACTIVE,
	DATAATTACHED,
	HOME,
	LAC,
	SYSTEM
	FROM
	(
	SELECT
	PLBBAGENT_EVENTFORWARD_TELEPHONYREGISTRATION.TIMESTAMP AS TELEPHONYREG_TIMESTAMP,
	DATAIND,
	OPERATOR,
	STATUS,
	CELLID,
	DATAACTIVE,
	DATAATTACHED,
	HOME,
	LAC,
	PLBBAGENT_EVENTFORWARD_TELEPHONYREGISTRATION.ID AS "TELEPHONYREG_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLBBAGENT_EVENTFORWARD_TELEPHONYREGISTRATION
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS TELEPHONYREG_STATE
	GROUP BY
	TELEPHONYREG_ID
	)

[FileParser.ios.aggregate_dictionary_distributed_keys]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/aggregate_dictionary_distributed_keys.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Keeping track of various values on a per-day basis.
query = 
	SELECT
	DISTRIBUTIONKEYS.KEY AS "KEY",
	DISTRIBUTIONVALUES.VALUE AS "VALUE",
	DISTRIBUTIONVALUES.SECONDSINDAYOFFSET AS "SECONDS IN DAY OFFSET",
	DATE(DISTRIBUTIONKEYS.DAYSSINCE1970*86400, 'unixepoch') AS "DAY",
	DISTRIBUTIONVALUES.DISTRIBUTIONID AS "DISTRIBUTIONVALUES TABLE ID"
	FROM
	DISTRIBUTIONKEYS
	LEFT JOIN
	DISTRIBUTIONVALUES
	ON DISTRIBUTIONKEYS.ROWID = DISTRIBUTIONVALUES.DISTRIBUTIONID

[FileParser.ios.powerlog_display_brightness]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_display_brightness.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Screen Brightness Percentage
query = 
	SELECT
	DATETIME(BRIGHTNESS_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	BRIGHTNESS,
	DATETIME(BRIGHTNESS_TIMESTAMP, 'unixepoch') AS ORIGINAL_BRIGHTNESS_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	BRIGHTNESS_ID AS "PLDISPLAYAGENT_EVENTFORWARD_DISPLAY TABLE ID"
	FROM
	(
	SELECT
	BRIGHTNESS_ID,
	BRIGHTNESS_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	BRIGHTNESS,
	SYSTEM
	FROM
	(
	SELECT
	PLDISPLAYAGENT_EVENTFORWARD_DISPLAY.TIMESTAMP AS BRIGHTNESS_TIMESTAMP,
	BRIGHTNESS,
	PLDISPLAYAGENT_EVENTFORWARD_DISPLAY.ID AS "BRIGHTNESS_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLDISPLAYAGENT_EVENTFORWARD_DISPLAY
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS BRIGHTNESS_STATE
	GROUP BY
	BRIGHTNESS_ID
	)

[FileParser.ios.powerlog_incallservice]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_incallservice.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Provides calling service details and status.
query = 
	SELECT
	DATETIME(INCALLSERVICE_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	BUNDLEID AS "BUNDLE ID",
	STATUS,
	DATETIME(INCALLSERVICE_TIMESTAMP, 'unixepoch') AS ORIGINAL_INCALLSERVICE_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	INCALLSERVICE_ID AS "PLXPCAGENT_EVENTFORWARD_INCALLSERVICE TABLE ID"
	FROM
	(
	SELECT
	INCALLSERVICE_ID,
	INCALLSERVICE_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	BUNDLEID,
	STATUS,
	SYSTEM
	FROM
	(
	SELECT
	PLXPCAGENT_EVENTFORWARD_INCALLSERVICE.TIMESTAMP AS INCALLSERVICE_TIMESTAMP,
	BUNDLEID,
	STATUS,
	PLXPCAGENT_EVENTFORWARD_INCALLSERVICE.ID AS "INCALLSERVICE_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLXPCAGENT_EVENTFORWARD_INCALLSERVICE
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	WHERE
	INCALLSERVICE_TIMESTAMP > TIME_OFFSET_TIMESTAMP
	)
	AS INCALLSERVICE_STATE
	GROUP BY
	INCALLSERVICE_ID
	)

[FileParser.ios.powerlog_battery_level]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_battery_level.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	LEVEL AS "LEVEL",
	RAWLEVEL AS "RAW LEVEL",
	ISCHARGING AS "IS CHARGING",
	FULLYCHARGED AS "FULLY CHARGED",
	ID AS "PLBATTERYAGENT_EVENTBACKWARD_BATTERY TABLE ID"
	FROM
	PLBATTERYAGENT_EVENTBACKWARD_BATTERY

[FileParser.ios.datausage_zprocess]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/datausage_zprocess.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Data Usage Processes/Bundle IDs.
query = 
	SELECT
	DATETIME(ZPROCESS.ZTIMESTAMP+ 978307200, 'unixepoch') AS "TIMESTAMP",
	DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS FIRST TIMESTAMP",
	ZPROCESS.ZPROCNAME AS "PROCESS NAME",
	ZPROCESS.ZBUNDLENAME AS "BUNDLE ID",
	ZPROCESS.Z_PK AS "ZPROCESS TABLE ID"
	FROM ZPROCESS

[FileParser.ios.powerlog_video]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_video.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Which app is playing a video.
query = 
	SELECT
	DATETIME(VIDEO_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	CLIENTDISPLAYID AS "CLIENT DISPLAY ID",
	STATE,
	CLIENTPID AS "CLIENT PID",
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	VIDEO_ID AS "PLVIDEOAGENT_EVENTFORWARD_VIDEO TABLE ID"
	FROM
	(
	SELECT
	VIDEO_ID,
	VIDEO_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	CLIENTDISPLAYID,
	STATE,
	CLIENTPID,
	SYSTEM
	FROM
	(
	SELECT
	PLVIDEOAGENT_EVENTFORWARD_VIDEO.TIMESTAMP AS VIDEO_TIMESTAMP,
	CLIENTDISPLAYID,
	STATE,
	CLIENTPID,
	PLVIDEOAGENT_EVENTFORWARD_VIDEO.ID AS "VIDEO_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLVIDEOAGENT_EVENTFORWARD_VIDEO
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS VIDEO_STATE
	GROUP BY
	VIDEO_ID
	)

[FileParser.ios.powerlog_timezone]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_timezone.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Keeping track of the timezone.
query = 
	SELECT
	DATETIME(TIMEZONE_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	TIMEZONENAME AS "TIME ZONE NAME",
	COUNTRYCODE AS "COUNTRY CODE",
	LOCALEID AS "LOCALE ID",
	SECONDSFROMGMT / 3600 AS "SECONDS FROM GMT",
	TIMEZONEISINDST AS "TIME ZONE IN DST",
	TRIGGER AS "TRIGGER",
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	TIMEZONE_ID AS "PLLOCALEAGENT_EVENTFORWARD_TIMEZONE TABLE ID"
	FROM
	(
	SELECT
	TIMEZONE_ID,
	TIMEZONE_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	TIMEZONENAME,
	COUNTRYCODE,
	LOCALEID,
	SECONDSFROMGMT,
	TIMEZONEISINDST,
	TRIGGER,
	SYSTEM
	FROM
	(
	SELECT
	PLLOCALEAGENT_EVENTFORWARD_TIMEZONE.TIMESTAMP AS TIMEZONE_TIMESTAMP,
	TIMEZONENAME,
	COUNTRYCODE,
	LOCALEID,
	SECONDSFROMGMT,
	TIMEZONEISINDST,
	TRIGGER,
	PLLOCALEAGENT_EVENTFORWARD_TIMEZONE.ID AS "TIMEZONE_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLLOCALEAGENT_EVENTFORWARD_TIMEZONE
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS TIMEZONE_STATE
	GROUP BY
	TIMEZONE_ID
	)

[FileParser.ios.routined_cacheencryptedB_hint]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/routined_cacheencryptedB_hint.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Routined Locations
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM HINT

[FileParser.ios.safari_history]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/safari_history.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Safari Browsing
query = 
	SELECT
	HISTORY_ITEMS.URL AS "URL",
	HISTORY_ITEMS.VISIT_COUNT AS "VISIT COUNT",
	HISTORY_VISITS.TITLE AS "TITLE",
	CASE HISTORY_VISITS.ORIGIN
	WHEN 1 THEN "ICLOUD SYNCED DEVICE"
	WHEN 0 THEN "VISTED FROM THIS DEVICE"
	END "ICLOUD SYNC",
	HISTORY_VISITS.LOAD_SUCCESSFUL AS "LOAD SUCCESSFUL",
	HISTORY_VISITS.REDIRECT_SOURCE AS "REDIRECT SOURCE",
	HISTORY_VISITS.REDIRECT_DESTINATION AS "REDIRECT DESTINATION",
	DATETIME(HISTORY_VISITS.VISIT_TIME+978307200,'UNIXEPOCH') AS "VISIT TIME",
	HISTORY_VISITS.ID AS "HISTORY ITEM ID"
	FROM HISTORY_ITEMS
	LEFT OUTER JOIN HISTORY_VISITS ON HISTORY_ITEMS.ID == HISTORY_VISITS.HISTORY_ITEM

[FileParser.ios.coreduetdclassd_device_plugin_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/coreduetdclassd_device_plugin_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Plugin State
query = 
	SELECT
	CASE ZCABLESTATE
	WHEN "0" THEN "Unplugged"
	WHEN "1" THEN "Plugged In"
	END "CABLE STATE",
	DATETIME(ZCREATIONDATE+978307200,'unixepoch') as "TIMESTAMP",
	TIME(ZCREATIONDATE-ZLOCALTIME,'unixepoch') as "TIME ZONE"
	FROM ZCDDMPLUGINEVENT

[FileParser.ios.powerlog_device_telephony_activity]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_device_telephony_activity.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	AIRPLANEMODE AS "AIRPLANE MODE",
	CALLSTATUS AS "CALL STATUS",
	SIGNALBARS AS "SIGNALS BARS",
	SIGNALSTRENGTH AS "SIGNAL STRENGTH",
	CAMPEDRAT AS "CAMPED RAT",
	CURRENTRAT AS "CURRENT RAT",
	PREFERREDRAT AS "PREFERRED RAT",
	ACTIVEBAND AS "ACTIVE BAND",
	DATASTATUS AS "DATA STATUS",
	SIMSTATUS AS "SIM STATUS",
	ID AS "PLBBAGENT_EVENTPOINT_TELEPHONYACTIVITY TABLE ID"
	FROM
	PLBBAGENT_EVENTPOINT_TELEPHONYACTIVITY

[FileParser.ios.locationd_cacheencryptedC_stepcounthistory]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedC_stepcounthistory.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Step Count History
query = 
	SELECT
	DATETIME(STARTTIME + 978307200, 'UNIXEPOCH') AS "START TIME",
	TIMESTAMP AS "MOVEMENT TIME",
	COUNT AS "COUNT",
	DISTANCE AS "DISTANCE",
	RAWDISTANCE AS "RAWDISTANCE",
	FLOORSASCENDED AS "FLOORS ASCENDED",
	FLOORSDESCENDED AS "FLOORS DESCENDED",
	PACE AS "PACE",
	ACTIVETIME AS "ACTIVE TIME",
	STEPCOUNTHISTORY.ID AS "STEPCOUNTHISTORY TABLE ID"
	FROM STEPCOUNTHISTORY

[FileParser.ios.locationd_cacheencryptedAB_scdmacelllocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_scdmacelllocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd SCDMA Cell Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	LAC AS "LAC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PSC AS "PSC",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM SCDMACELLLOCATION

[FileParser.ios.powerlog_process_data_usage]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_process_data_usage.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS "TIMESTAMP",
	DATETIME(TIMESTAMPEND, 'unixepoch') AS "TIMESTAMP END",
	BUNDLENAME AS "BUNDLE ID",
	PROCESSNAME AS "PROCESS NAME",
	CELLIN AS "CELLULAR IN",
	CELLOUT AS "CELLULAR OUT",
	WIFIIN AS "WIFI IN",
	WIFIOUT AS "WIFI OUT",
	ID AS "PLPROCESSNETWORKAGENT_EVENTINTERVAL_USAGEDIFF TABLE ID"
	FROM
	PLPROCESSNETWORKAGENT_EVENTINTERVAL_USAGEDIFF

[FileParser.ios.powerlog_paired_device_config]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_paired_device_config.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	BUILD,
	DEVICE,
	ID AS "PLCONFIGAGENT_EVENTNONE_PAIREDDEVICECONFIG TABLE ID"
	FROM
	PLCONFIGAGENT_EVENTNONE_PAIREDDEVICECONFIG

[FileParser.ios.powerlog_app_usage]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_app_usage.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Application/Device screen state/orientation
query = 
	SELECT
	DATETIME(SCREEN_STATE_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	BUNDLEID AS BUNDLE_ID,
	APPROLE,
	DISPLAY,
	LEVEL,
	SCREENWEIGHT,
	DATETIME(SCREEN_STATE_TIMESTAMP, 'unixepoch') AS ORIGINAL_SCREEN_STATE_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	SCREENSTATE_ID AS "PLSCREENSTATEAGENT_EVENTFORWARD_SCREENSTATE TABLE ID"
	FROM
	(
	SELECT
	BUNDLEID,
	SCREENSTATE_ID,
	SCREEN_STATE_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) as max_id,
	SYSTEM,
	APPROLE,
	DISPLAY,
	LEVEL,
	SCREENWEIGHT
	FROM
	(
	SELECT
	PLSCREENSTATEAGENT_EVENTFORWARD_SCREENSTATE.APPROLE AS APPROLE,
	PLSCREENSTATEAGENT_EVENTFORWARD_SCREENSTATE.DISPLAY AS DISPLAY,
	PLSCREENSTATEAGENT_EVENTFORWARD_SCREENSTATE.LEVEL AS LEVEL,
	PLSCREENSTATEAGENT_EVENTFORWARD_SCREENSTATE.SCREENWEIGHT AS SCREENWEIGHT,
	PLSCREENSTATEAGENT_EVENTFORWARD_SCREENSTATE.ID AS SCREENSTATE_ID,
	PLSCREENSTATEAGENT_EVENTFORWARD_SCREENSTATE.TIMESTAMP AS SCREEN_STATE_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM,
	BUNDLEID
	FROM
	PLSCREENSTATEAGENT_EVENTFORWARD_SCREENSTATE
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS SCREENSTATE
	GROUP BY
	SCREENSTATE_ID
	)

[FileParser.ios.netusage_zliveusage]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/netusage_zliveusage.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Network Usage Traffic by Process.
query = 
	SELECT
	DATETIME(ZPROCESS.ZTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS TIMESTAMP",
	DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS FIRST TIMESTAMP",
	DATETIME(ZLIVEUSAGE.ZTIMESTAMP + 978307200, 'unixepoch') AS "LIVE USAGE TIMESTAMP",
	ZBUNDLENAME AS "BUNDLE ID",
	ZPROCNAME AS "PROCESS NAME",
	ZWIFIIN AS "WIFI IN",
	ZWIFIOUT AS "WIFI OUT",
	ZWWANIN AS "WWAN IN",
	ZWWANOUT AS "WWAN OUT",
	ZWIREDIN AS "WIRED IN",
	ZWIREDOUT AS "WIRED OUT",
	ZLIVEUSAGE.Z_PK AS "ZLIVEUSAGE TABLE ID"
	FROM ZLIVEUSAGE
	LEFT JOIN ZPROCESS ON ZPROCESS.Z_PK = ZLIVEUSAGE.ZHASPROCESS

[FileParser.ios.powerlog_app_audio]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_app_audio.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Audio Routing via App
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	DATETIME(TIMESTAMPLOGGED, 'unixepoch') AS "TIMESTAMP LOGGED",
	APPLICATIONNAME AS "APPLICATION NAME / BUNDLE ID",
	ASSERTIONID AS "ASERTION ID",
	ASSERTIONNAME AS "ASSERTION NAME",
	AUDIOROUTE AS "AUDIO ROUTE",
	MIRRORINGSTATE AS "MIRRORING STATE",
	OPERATION,
	PID,
	ID AS "PLAUDIOAGENT_EVENTPOINT_AUDIOAPP TABLE ID"
	FROM
	PLAUDIOAGENT_EVENTPOINT_AUDIOAPP

[FileParser.ios.health_flights]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/health_flights.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Health Flights Climbed
query = 
	SELECT
	QUANTITY AS "FLIGHTS CLIMBED",
	DATETIME(SAMPLES.START_DATE + 978307200, 'unixepoch') AS "START DATE",
	DATETIME(SAMPLES.END_DATE + 978307200, 'unixepoch') AS "END DATE",
	SAMPLES.DATA_ID AS "SAMPLES TABLE ID"
	FROM
	SAMPLES
	LEFT OUTER JOIN
	QUANTITY_SAMPLES
	ON SAMPLES.DATA_ID = QUANTITY_SAMPLES.DATA_ID
	WHERE
	SAMPLES.DATA_TYPE = 12

[FileParser.ios.locationd_cacheencryptedAB_passharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_passharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Pass Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	PASSTYPEID AS "PASS TYPE ID",
	ASSOCIATEDSTOREIDS AS  "ASSOCIATED STORE IDS",
	PASSSOURCE AS "PASS SOURCE",
	AGE AS "AGE",
	SIG AS "SIG",
	CONFIDENCE AS "CONFIDENCE",
	ALTITUDE AS "ALTITUDE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM PassHarvest

[FileParser.ios.interaction_contact_interactions]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/interaction_contact_interactions.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(ZINTERACTIONS.ZCREATIONDATE + 978307200, 'unixepoch') AS "ZINTERACTIONS CREATION DATE",
	ZINTERACTIONS.ZBUNDLEID,
	ZCONTACTS.ZDISPLAYNAME,
	ZCONTACTS.ZIDENTIFIER,
	ZCONTACTS.ZPERSONID,
	ZINTERACTIONS.ZDIRECTION,
	ZINTERACTIONS.ZISRESPONSE,
	ZINTERACTIONS.ZMECHANISM,
	ZINTERACTIONS.ZRECIPIENTCOUNT,
	DATETIME(ZCONTACTS.ZCREATIONDATE + 978307200, 'unixepoch') AS "ZCONTACTS CREATION DATE",
	DATETIME(ZINTERACTIONS.ZSTARTDATE + 978307200, 'unixepoch') AS "START DATE",
	DATETIME(ZINTERACTIONS.ZENDDATE + 978307200, 'unixepoch') AS "END DATE",
	DATETIME(ZCONTACTS.ZFIRSTINCOMINGRECIPIENTDATE + 978307200, 'unixepoch') AS "FIRST INCOMING RECIPIENT DATE",
	DATETIME(ZCONTACTS.ZFIRSTINCOMINGSENDERDATE + 978307200, 'unixepoch') AS "FIRST INCOMING SENDER DATE",
	DATETIME(ZCONTACTS.ZFIRSTOUTGOINGRECIPIENTDATE + 978307200, 'unixepoch') AS "FIRST OUTGOING RECIPIENT DATE",
	DATETIME(ZCONTACTS.ZLASTINCOMINGSENDERDATE + 978307200, 'unixepoch') AS "LAST INCOMING SENDER DATE",
	CASE
	ZLASTINCOMINGRECIPIENTDATE
	WHEN
	"0"
	THEN
	"0"
	ELSE
	DATETIME(ZCONTACTS.ZLASTINCOMINGRECIPIENTDATE + 978307200, 'unixepoch')
	END AS "LAST INCOMING RECIPIENT DATE",
	DATETIME(ZCONTACTS.ZLASTOUTGOINGRECIPIENTDATE + 978307200, 'unixepoch') AS "LAST OUTGOING RECIPIENT DATE",
	ZINTERACTIONS.ZACCOUNT,
	ZINTERACTIONS.ZDOMAINIDENTIFIER,
	ZCONTACTS.ZINCOMINGRECIPIENTCOUNT,
	ZCONTACTS.ZINCOMINGSENDERCOUNT,
	ZCONTACTS.ZOUTGOINGRECIPIENTCOUNT,
	ZINTERACTIONS.ZCONTENTURL,
	ZINTERACTIONS.ZLOCATIONUUID,
	ZINTERACTIONS.Z_PK AS "ZINTERACTIONS TABLE ID"
	FROM
	ZINTERACTIONS
	LEFT JOIN
	ZCONTACTS
	ON ZINTERACTIONS.ZSENDER = ZCONTACTS.Z_PK

[FileParser.ios.powerlog_device_lock_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_device_lock_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Records when the device is locked or unlocked.
query = 
	SELECT
	DATETIME(LOCKSTATE_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	CASE LOCKED
	WHEN "0" THEN "DEVICE UNLOCKED"
	WHEN "1" THEN "DEVICE LOCKED"
	END AS "LOCK STATUS",
	DATETIME(LOCKSTATE_TIMESTAMP, 'unixepoch') AS ORIGINAL_LOCKSTATE_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	LOCKSTATE_ID AS "PLSPRINGBOARDAGENT_EVENTFORWARD_SBLOCK TABLE ID"
	FROM
	(
	SELECT
	LOCKSTATE_ID,
	LOCKSTATE_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	LOCKED,
	SYSTEM
	FROM
	(
	SELECT
	PLSPRINGBOARDAGENT_EVENTFORWARD_SBLOCK.TIMESTAMP AS LOCKSTATE_TIMESTAMP,
	LOCKED,
	PLSPRINGBOARDAGENT_EVENTFORWARD_SBLOCK.ID AS "LOCKSTATE_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLSPRINGBOARDAGENT_EVENTFORWARD_SBLOCK
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS LOCKSTATE_STATE
	GROUP BY
	LOCKSTATE_ID
	)

[FileParser.ios.powerlog_location_client_status]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_location_client_status.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Location Usage by App/Process Client
query = 
	SELECT
	DATETIME(LOCATIONAGENT_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	DATETIME(TIMESTAMPLOGGED+ SYSTEM, 'unixepoch') AS "TIMESTAMP LOGGED (ADJ)",
	DATETIME(TIMESTAMPEND + SYSTEM, 'unixepoch') AS "TIMESTAMP END (ADJ)",
	BUNDLEID AS "BUNDLE ID",
	TYPE AS "TYPE",
	LOCATIONDESIREDACCURACY AS "LOCATION DESIRED ACCURACY",
	LOCATIONDISTANCEFILTER AS "LOCATION DISTANCE FILTER",
	CLIENT AS "CLIENT",
	EXECUTABLE AS "EXECUTABLE",
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	LOCATIONAGENT_ID AS "PLLOCATIONAGENT_EVENTFORWARD_CLIENTSTATUS TABLE ID"
	FROM
	(
	SELECT
	LOCATIONAGENT_ID,
	LOCATIONAGENT_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	TIMESTAMPEND,
	TIMESTAMPLOGGED,
	BUNDLEID,
	TYPE,
	LOCATIONDESIREDACCURACY,
	LOCATIONDISTANCEFILTER,
	CLIENT,
	EXECUTABLE,
	SYSTEM
	FROM
	(
	SELECT
	PLLOCATIONAGENT_EVENTFORWARD_CLIENTSTATUS.TIMESTAMP AS LOCATIONAGENT_TIMESTAMP,
	TIMESTAMPEND,
	TIMESTAMPLOGGED,
	BUNDLEID,
	TYPE,
	LOCATIONDESIREDACCURACY,
	LOCATIONDISTANCEFILTER,
	CLIENT,
	EXECUTABLE,
	PLLOCATIONAGENT_EVENTFORWARD_CLIENTSTATUS.ID AS "LOCATIONAGENT_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLLOCATIONAGENT_EVENTFORWARD_CLIENTSTATUS
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS LOCATIONAGENT_STATE
	GROUP BY
	LOCATIONAGENT_ID
	)

[FileParser.ios.powerlog_ids_messages]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_ids_messages.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	DATETIME(TIMESTAMPEND, 'unixepoch') AS "TIMESTAMP END",
	TOPIC AS "TOPIC",
	PRIORITY AS "PRIORITY",
	INCOMINGMESSAGES AS "INCOMING MESSAGES",
	OUTGOINGMESSAGES AS "OUTGOING MESSAGES",
	INCOMINGBYTES AS "INCOMING BYTES",
	OUTGOINGBYTES AS "OUTGOING BYTES",
	ID AS "PLIDENTITYSERVICESAGENT_EVENTINTERVAL_IDSMESSAGEPERIODIC TABLE ID"
	FROM
	PLIDENTITYSERVICESAGENT_EVENTINTERVAL_IDSMESSAGEPERIODIC

[FileParser.ios.powerlog_device_screen]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_device_screen.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Records which Springboard screen device is on. Homescreen(s)=2 Widgets=19, Control Center=5, Lock Screen=9, Pin Unlock Screen=15, Blank Screen=0, App Switcher=4, Spotlight Search=18, Lock Screen Camera=11, Lock Screen Widgets=17
query = 
	SELECT
	DATETIME(SCREENSTATE_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	SCREEN,
	DATETIME(SCREENSTATE_TIMESTAMP, 'unixepoch') AS ORIGINAL_SCREENSTATE_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	SCREENSTATE_ID AS "PLSPRINGBOARDAGENT_EVENTFORWARD_SBSCREEN TABLE ID"
	FROM
	(
	SELECT
	SCREENSTATE_ID,
	SCREENSTATE_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	SCREEN,
	SYSTEM
	FROM
	(
	SELECT
	PLSPRINGBOARDAGENT_EVENTFORWARD_SBSCREEN.TIMESTAMP AS SCREENSTATE_TIMESTAMP,
	SCREEN,
	PLSPRINGBOARDAGENT_EVENTFORWARD_SBSCREEN.ID AS "SCREENSTATE_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLSPRINGBOARDAGENT_EVENTFORWARD_SBSCREEN
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS SCREENSTATE_STATE
	GROUP BY
	SCREENSTATE_ID
	)

[FileParser.ios.coreduetd_device_lock_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/coreduetd_device_lock_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Lock State
query = 
	SELECT
	CASE ZLOCKSTATE
	WHEN "0" THEN "Unlocked"
	WHEN "1" THEN "Locked"
	END "LOCK STATE",
	DATETIME(ZCREATIONDATE+978307200,"unixepoch") as "CREATE TIME",
	TIME(ZLOCALTIME,"unixepoch") as "LOCAL DEVICE TIME",
	TIME(ZCREATIONDATE-ZLOCALTIME,"unixepoch") as "TIME ZONE"
	FROM ZCDDMSCREENLOCKEVENT

[FileParser.ios.powerlog_device_volume]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_device_volume.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Volume Percentage
query = 
	SELECT
	DATETIME(VOLUME_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	VOLUME AS "VOLUME PERCENTAGE",
	CASE MUTED
	WHEN "0" THEN "NO"
	WHEN "1" THEN "YES"
	END AS "MUTED",
	DATETIME(VOLUME_TIMESTAMP, 'unixepoch') AS ORIGINAL_VOLUME_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	VOLUME_ID AS "PLAUDIOAGENT_EVENTFORWARD_OUTPUT TABLE ID"
	FROM
	(
	SELECT
	VOLUME_ID,
	VOLUME_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	VOLUME,
	MUTED,
	SYSTEM
	FROM
	(
	SELECT
	PLAUDIOAGENT_EVENTFORWARD_OUTPUT.TIMESTAMP AS VOLUME_TIMESTAMP,
	VOLUME,
	MUTED,
	PLAUDIOAGENT_EVENTFORWARD_OUTPUT.ID AS "VOLUME_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLAUDIOAGENT_EVENTFORWARD_OUTPUT
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS VOLUME_STATE
	GROUP BY
	VOLUME_ID
	)

[FileParser.ios.locationd_cacheencryptedAB_celllocationlocal]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_celllocationlocal.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Cell Location Local
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	LAC AS "LAC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PSC AS "PSC",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CELLLOCATIONLOCAL

[FileParser.ios.locationd_cacheencryptedAB_appharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_appharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd App Harvest Location
query = 
	SELECT
	BUNDLEID AS "BUNDLE ID",
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	ALTITUDE AS "ALTITUDE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	STATE AS "STATE",
	AGE AS "AGE",
	ROUTINEMODE AS "ROUTINE MODE",
	LOCATIONOFINTERESTTYPE AS "LOCATION OF INTEREST TYPE",
	HEX(SIG) AS "SIG (HEX)",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM AppHarvest

[FileParser.ios.powerlog_frontcamera_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_frontcamera_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Records when front camera is in use.
query = 
	SELECT
	DATETIME(CAMERA_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	BUNDLEID AS BUNDLE_ID,
	CASE STATE
	WHEN "0" THEN "OFF"
	WHEN "1" THEN "ON"
	END AS STATE,
	DATETIME(CAMERA_TIMESTAMP, 'unixepoch') AS ORIGINAL_CAMERA_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	CAMERA_ID AS "PLCAMERAAGENT_EVENTFORWARD_FRONTCAMERA TABLE ID"
	FROM
	(
	SELECT
	BUNDLEID,
	CAMERA_ID,
	CAMERA_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) as max_id,
	SYSTEM,
	STATE
	FROM
	(
	SELECT
	PLCAMERAAGENT_EVENTFORWARD_FRONTCAMERA.TIMESTAMP AS CAMERA_TIMESTAMP,
	PLCAMERAAGENT_EVENTFORWARD_FRONTCAMERA.BUNDLEID,
	PLCAMERAAGENT_EVENTFORWARD_FRONTCAMERA.STATE,
	PLCAMERAAGENT_EVENTFORWARD_FRONTCAMERA.ID as "CAMERA_ID",
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM,
	BUNDLEID
	FROM
	PLCAMERAAGENT_EVENTFORWARD_FRONTCAMERA
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS CAMERASTATE
	GROUP BY
	CAMERA_ID
	)

[FileParser.ios.locationd_cacheencryptedAB_cdmacelllocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_cdmacelllocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd CDMA Cell Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	SID AS "SID",
	NID AS "NID",
	BSID AS "BSID",
	ZONEID AS "ZONEID",
	BANDCLASS AS "BANDCLASS",
	CHANNEL AS "CHANNEL",
	PNOFFSET AS "PNOFFSET",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CdmaCellLocation

[FileParser.ios.locationd_cacheencryptedC_motionstatehistory]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedC_motionstatehistory.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Motion State History
query = 
	SELECT
	DATETIME(STARTTIME + 978307200, 'unixepoch') AS "START TIME",
	TIMESTAMP AS "TIMESTAMP",
	TYPE AS "TYPE",
	CONFIDENCE AS "CONFIDENCE",
	MOUNTED AS "MOUNTED",
	MOUNTEDCONFIDENCE AS "MOUNTED CONFIDENCE",
	TURN AS "TURN",
	ISVEHICULAR AS "IS VEHICULAR",
	ISMOVING AS "IS MOVING",
	VEHICLEEXITSTATE AS "VEHICLE EXIT STATE",
	MOTIONSTATEHISTORY.ID AS "MOTIONSTATEHISTORY TABLE ID"
	FROM MOTIONSTATEHISTORY

[FileParser.ios.health_stood_up]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/health_stood_up.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Health Stood Up
query = 
	SELECT
	QUANTITY AS "STOOD UP",
	DATETIME(SAMPLES.START_DATE + 978307200, 'unixepoch') AS "START DATE",
	DATETIME(SAMPLES.END_DATE + 978307200, 'unixepoch') AS "END DATE",
	SAMPLES.DATA_ID AS "SAMPLES TABLE ID"
	FROM
	SAMPLES
	LEFT OUTER JOIN
	QUANTITY_SAMPLES
	ON SAMPLES.DATA_ID = QUANTITY_SAMPLES.DATA_ID
	WHERE
	SAMPLES.DATA_TYPE = 75

[FileParser.ios.powerlog_app_usage_by_hour]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_app_usage_by_hour.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS "HOUR OF DAY",
	TIMEINTERVAL / 60 AS "TIME INTERVAL (MINUTES)",
	BUNDLEID AS "BUNDLE ID",
	SCREENONTIME AS "SCREEN TIME (SECONDS)",
	BACKGROUNDTIME AS "BACKGROUND TIME (SECONDS)",
	ID AS "PLAPPTIMESERVICE_AGGREGATE_APPRUNTIME TABLE ID"
	FROM
	PLAPPTIMESERVICE_AGGREGATE_APPRUNTIME

[FileParser.ios.locationd_cacheencryptedAB_indoorlocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_indoorlocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Indoor Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	PROVIDER AS "PROVIDER",
	FLOOR AS  "FLOOR",
	CONFIDENCE AS "CONFIDENCE",
	BUNDLEID AS "BUNDLE ID",
	ALTITUDE AS "ALTITUDE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM IndoorLocationHarvest

[FileParser.ios.locationd_cacheencryptedC_nataliehistory]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedC_nataliehistory.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Natalie History
query = 
	SELECT
	DATETIME(STARTTIME + 978307200, 'UNIXEPOCH') AS "START TIME",
	ACTIVITYTYPE AS "ACTIVITY TYPE",
	ISSTANDING AS "IS STANDING",
	METS AS "METS",
	NATALIES AS "NATALIES",
	BASALNATALIES AS "BASEL NATALIES",
	OVERRIDESET AS "OVERRIDE SET",
	NATALIEHISTORY.ID AS "NATALIEHISTORY TABLE ID"
	FROM NATALIEHISTORY

[FileParser.ios.locationd_cacheencryptedAB_ltecelllocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_ltecelllocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd LTE Cell Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	TAC AS  "TAC",
	CI AS "CI",
	PID AS "PID",
	BANDINFO AS "BAND INFO",
	UARFCN AS "UARFCN",
	CONFIDENCE AS "CONFIDENCE",
	BUNDLEID AS "BUNDLE ID",
	RSCP AS "RSCP",
	ECN0 AS "ECN0",
	RSSI AS "RSSI",
	CELLLATITUDE AS "CELL LATITUTDE",
	CELLLONGITUDE AS "CELL LONGITUDE",
	OPERATOR AS "OPERATOR",
	ALTITUDE AS "ALTITUDE",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	MOTIONVEHICLECONNECTEDSTATECHANGED AS "MOTION VEHICLE CONNECTED STATE CHANGED",
	MOTIONVEHICLECONNECTED AS "MOTION VEHICLE CONNECTED",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LteCellLocationHarvest

[FileParser.ios.powerlog_torch_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_torch_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Determine when the flashlight/torch was turned on/off and how (com.apple.springboard in the Bundle ID is using the control center).
query = 
	SELECT
	DATETIME(TORCH_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	BUNDLEID AS BUNDLE_ID,
	CASE LEVEL
	WHEN "0" THEN "OFF"
	WHEN "1" THEN "ON"
	END AS STATUS,
	DATETIME(TORCH_TIMESTAMP, 'unixepoch') AS ORIGINAL_TORCH_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	TORCH_ID
	FROM
	(
	SELECT
	BUNDLEID,
	TORCH_ID,
	TORCH_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	SYSTEM,
	LEVEL
	FROM
	(
	SELECT
	PLCAMERAAGENT_EVENTFORWARD_TORCH.TIMESTAMP AS TORCH_TIMESTAMP,
	PLCAMERAAGENT_EVENTFORWARD_TORCH.BUNDLEID,
	PLCAMERAAGENT_EVENTFORWARD_TORCH.LEVEL,
	PLCAMERAAGENT_EVENTFORWARD_TORCH.ID as "TORCH_ID",
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM,
	BUNDLEID
	FROM
	PLCAMERAAGENT_EVENTFORWARD_TORCH
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS TORCHESTATE
	GROUP BY
	TORCH_ID
	)

[FileParser.ios.datausage_zliveusage]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/datausage_zliveusage.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Data Usage Traffic by Process.
query = 
	SELECT
	DATETIME(ZLIVEUSAGE.ZTIMESTAMP + 978307200, 'unixepoch') AS "TIMESTAMP",
	DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS FIRST TIMESTAMP",
	DATETIME(ZPROCESS.ZTIMESTAMP+ 978307200, 'unixepoch') AS "PROCESS TIMESTAMP",
	ZPROCESS.ZPROCNAME AS "PROCESS NAME",
	ZPROCESS.ZBUNDLENAME AS "BUNDLE ID",
	ZLIVEUSAGE.ZWIFIIN AS "WIFI IN",
	ZLIVEUSAGE.ZWIFIOUT AS "WIFI OUT",
	ZLIVEUSAGE.ZWWANIN AS "WWAN IN",
	ZLIVEUSAGE.ZWWANOUT AS "WWAN OUT",
	ZLIVEUSAGE.Z_PK AS "ZLIVEUSAGE TABLE ID"
	FROM ZLIVEUSAGE
	LEFT JOIN ZPROCESS ON ZLIVEUSAGE.ZHASPROCESS = ZPROCESS.Z_PK

[FileParser.ios.locationd_cacheencryptedAB_ltecelllocationlocal]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_ltecelllocationlocal.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd LTE Cell Location Local
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PID as "PID",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LteCellLocationLocal

[FileParser.ios.locationd_cacheencryptedAB_pressurelocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_pressurelocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Pressure Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	PROVIDER AS "PROVIDER",
	FLOOR AS  "FLOOR",
	CONFIDENCE AS "CONFIDENCE",
	BUNDLEID AS "BUNDLE ID",
	ALTITUDE AS "ALTITUDE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM PressureLocationHarvest

[FileParser.ios.health_steps]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/health_steps.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Health Steps
query = 
	SELECT
	QUANTITY AS "STEPS",
	DATETIME(SAMPLES.START_DATE + 978307200, 'unixepoch') AS "START DATE",
	DATETIME(SAMPLES.END_DATE + 978307200, 'unixepoch') AS "END DATE",
	SAMPLES.DATA_ID AS "SAMPLES TABLE ID"
	FROM
	SAMPLES
	LEFT OUTER JOIN
	QUANTITY_SAMPLES
	ON SAMPLES.DATA_ID = QUANTITY_SAMPLES.DATA_ID
	WHERE
	SAMPLES.DATA_TYPE = 7

[FileParser.ios.powerlog_push_message_received]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_push_message_received.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	BUNDLEID AS "BUNDLE ID",
	CONNECTIONTYPE AS "CONNECTION TYPE",
	ISDROPPED AS "IS DROPPED",
	LINKQUALITY AS "LINK QUALITY",
	PRIORITY,
	TOPIC,
	SERVERHOSTNAME AS "SERVER HOSTNAME",
	SERVERIP AS "SERVER IP",
	ID AS "PLPUSHAGENT_EVENTPOINT_RECEIVEDPUSH TABLE ID"
	FROM
	PLPUSHAGENT_EVENTPOINT_RECEIVEDPUSH

[FileParser.ios.health_distance]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/health_distance.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Health Distance
query = 
	SELECT
	QUANTITY AS "DISTANCE IN METERS",
	DATETIME(SAMPLES.START_DATE + 978307200, 'unixepoch') AS "START DATE",
	DATETIME(SAMPLES.END_DATE + 978307200, 'unixepoch') AS "END DATE",
	SAMPLES.DATA_ID AS "SAMPLES TABLE ID"
	FROM
	SAMPLES
	LEFT OUTER JOIN
	QUANTITY_SAMPLES
	ON SAMPLES.DATA_ID = QUANTITY_SAMPLES.DATA_ID
	LEFT OUTER JOIN
	CORRELATIONS
	ON SAMPLES.DATA_ID = CORRELATIONS.OBJECT
	WHERE
	SAMPLES.DATA_TYPE = 8

[FileParser.ios.sms_chat]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/sms_chat.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = SMS and Chat Messages
query = 
	SELECT
	CASE
	WHEN LENGTH(MESSAGE.DATE)=18 THEN DATETIME(MESSAGE.DATE/1000000000+978307200,'UNIXEPOCH')
	WHEN LENGTH(MESSAGE.DATE)=9 THEN DATETIME(MESSAGE.DATE + 978307200,'UNIXEPOCH')
	ELSE "N/A"
	END "MESSAGE DATE",
	CASE
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=18 THEN DATETIME(MESSAGE.DATE_DELIVERED/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=9 THEN DATETIME(MESSAGE.DATE_DELIVERED+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE DELIVERED",
	CASE
	WHEN LENGTH(MESSAGE.DATE_READ)=18 THEN DATETIME(MESSAGE.DATE_READ/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_READ)=9 THEN DATETIME(MESSAGE.DATE_READ+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE READ",
	MESSAGE.TEXT as "MESSAGE",
	HANDLE.ID AS "CONTACT ID",
	MESSAGE.SERVICE AS "SERVICE",
	MESSAGE.ACCOUNT AS "ACCOUNT",
	MESSAGE.IS_DELIVERED AS "IS DELIVERED",
	MESSAGE.IS_FROM_ME AS "IS FROM ME",
	ATTACHMENT.FILENAME AS "FILENAME",
	ATTACHMENT.MIME_TYPE AS "MIME TYPE",
	ATTACHMENT.TRANSFER_NAME AS "TRANSFER TYPE",
	ATTACHMENT.TOTAL_BYTES AS "TOTAL BYTES"
	FROM MESSAGE
	LEFT OUTER JOIN MESSAGE_ATTACHMENT_JOIN ON MESSAGE.ROWID = MESSAGE_ATTACHMENT_JOIN.MESSAGE_ID
	LEFT OUTER JOIN ATTACHMENT ON MESSAGE_ATTACHMENT_JOIN.ATTACHMENT_ID = ATTACHMENT.ROWID
	LEFT OUTER JOIN HANDLE ON MESSAGE.HANDLE_ID = HANDLE.ROWID

[FileParser.ios.powerlog_device_screen_autolock]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_device_screen_autolock.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Records the Auto-Lock timestamp.
query = 
	SELECT
	DATETIME(SBAUTOLOCK_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	AUTOLOCKTYPE AS "AUTO LOCK TYPE",
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	SBAUTOLOCK_ID AS "PLSPRINGBOARDAGENT_EVENTPOINT_SBAUTOLOCK TABLE ID"
	FROM
	(
	SELECT
	SBAUTOLOCK_ID,
	SBAUTOLOCK_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	AUTOLOCKTYPE,
	SYSTEM
	FROM
	(
	SELECT
	PLSPRINGBOARDAGENT_EVENTPOINT_SBAUTOLOCK.TIMESTAMP AS SBAUTOLOCK_TIMESTAMP,
	AUTOLOCKTYPE,
	PLSPRINGBOARDAGENT_EVENTPOINT_SBAUTOLOCK.ID AS "SBAUTOLOCK_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLSPRINGBOARDAGENT_EVENTPOINT_SBAUTOLOCK
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS SBAUTOLOCK_STATE
	GROUP BY
	SBAUTOLOCK_ID
	)

[FileParser.ios.powerlog_airdrop]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_airdrop.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Airdrop Connection infomation
query = 
	SELECT
	DATETIME(AIRDROP_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	STATE,
	SUBEVENT,
	BUNDLEID AS BUNDLE_ID,
	PID,
	DATETIME(AIRDROP_TIMESTAMP, 'unixepoch') AS ORIGINAL_AIRDROP_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	AIRDROP_ID AS "PLXPCAGENT_EVENTFORWARD_AIRDROP TABLE ID"
	FROM
	(
	SELECT
	BUNDLEID,
	AIRDROP_ID,
	AIRDROP_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) as max_id,
	SYSTEM,
	PID,
	SUBEVENT,
	STATE
	FROM
	(
	SELECT
	PLXPCAGENT_EVENTFORWARD_AIRDROP.TIMESTAMP AS AIRDROP_TIMESTAMP,
	PLXPCAGENT_EVENTFORWARD_AIRDROP.BUNDLEID,
	PLXPCAGENT_EVENTFORWARD_AIRDROP.PID,
	PLXPCAGENT_EVENTFORWARD_AIRDROP.SUBEVENT,
	PLXPCAGENT_EVENTFORWARD_AIRDROP.STATE,
	PLXPCAGENT_EVENTFORWARD_AIRDROP.ID as "AIRDROP_ID",
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM,
	BUNDLEID
	FROM
	PLXPCAGENT_EVENTFORWARD_AIRDROP
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS AIRDROPSTATE
	GROUP BY
	AIRDROP_ID
	)

[FileParser.ios.powerlog_battery_level_ui]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_battery_level_ui.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	LEVEL,
	ID AS "PLBATTERYAGENT_EVENTBACKWARD_BATTERYUI TABLE ID"
	FROM
	PLBATTERYAGENT_EVENTBACKWARD_BATTERYUI

[FileParser.ios.netusage_zliverouteperf]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/netusage_zliverouteperf.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Network Usage Traffic by Network.
query = 
	SELECT
	DATETIME(ZLIVEROUTEPERF.ZTIMESTAMP + 978307200, 'unixepoch') AS "LIVEROUTEPREF TIMESTAMP",
	DATETIME(ZNETWORKATTACHMENT.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "FIRST NETWORK ATTACHMENT",
	DATETIME(ZNETWORKATTACHMENT.ZTIMESTAMP + 978307200, 'unixepoch') AS "NETWORK ATTACHMENT TIMESTAMP",
	CASE ZLIVEROUTEPERF.ZKIND
	WHEN 1 THEN "WIFI"
	WHEN 2 THEN "CELLULAR"
	END "NETWORK TYPE",
	ZLIVEROUTEPERF.ZBYTESIN AS "BYTES IN",
	ZLIVEROUTEPERF.ZBYTESOUT AS "BYTES OUT",
	ZLIVEROUTEPERF.ZPACKETSIN AS "PACKETS IN",
	ZLIVEROUTEPERF.ZPACKETSOUT AS "PACKETS OUT",
	ZLIVEROUTEPERF.ZCONNATTEMPTS AS "CONNECTION ATTEMPTS",
	ZLIVEROUTEPERF.ZCONNSUCCESSES AS "CONNECTION SUCCESSES",
	ZNETWORKATTACHMENT.ZIDENTIFIER AS "NETWORK IDENTIFIER",
	ZNETWORKATTACHMENT.ZISKNOWNGOOD AS "IS KNOWN GOOD",
	ZNETWORKATTACHMENT.ZOVERALLSTAYMEAN AS "OVERALL STAY MEAN (NETWORK ATTACHMENT)",
	ZNETWORKATTACHMENT.ZOVERALLSTAYVAR AS "OVERALL STAY VAR (NETWORK ATTACHMENT)",
	ZLIVEROUTEPERF.ZOVERALLSTAY AS "OVERALL STAY MEAN (LIVE ROUTE PERF)",
	ZLIVEROUTEPERF.ZOVERALLSTAYM2 AS "OVERALL STAY M2 (LIVE ROUTE PERF)",
	ZLIVEROUTEPERF.Z_PK AS "ZLIVEROUTEPERF TABLE ID"
	FROM ZLIVEROUTEPERF
	LEFT JOIN ZNETWORKATTACHMENT ON ZLIVEROUTEPERF.ZHASNETWORKATTACHMENT = ZNETWORKATTACHMENT.Z_PK

[FileParser.ios.health_weight]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/health_weight.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Health Weight
query = 
	SELECT
	QUANTITY AS "WEIGHT (IN KG)",
	DATETIME(SAMPLES.START_DATE + 978307200, 'UNIXEPOCH') AS "DATE",
	SAMPLES.DATA_ID AS "SAMPLES TABLE ID"
	FROM
	SAMPLES
	LEFT OUTER JOIN QUANTITY_SAMPLES ON SAMPLES.DATA_ID = QUANTITY_SAMPLES.DATA_ID
	WHERE
	SAMPLES.DATA_TYPE = 3
	AND "DATE" IS  NOT NULL

[FileParser.ios.locationd_cacheencryptedAB_celllocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_celllocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Cell Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	ALTITUDE AS "ALTITUDE",
	MCC AS "MCC",
	MNC AS "MNC",
	CI AS "CI",
	RSSI AS "RSSI",
	ARFCN AS "ARFCN",
	PSC AS "PSC",
	RSCP AS "RSCP",
	ECN0 AS "ECN0",
	RAT AS "RAT",
	OPERATOR AS "OPERATOR",
	TRANSMIT AS "TRANSMIT",
	BUNDLEID AS "BUNDLE ID",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	MOTIONVEHICLECONNECTEDSTATECHANGED AS "MOTION VEHICLE CONNECTED STATE CHANGED",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CellLocationHarvest

[FileParser.ios.netusage_zprocess]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/netusage_zprocess.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Network Usage Processes/Bundle IDs
query = 
	SELECT
	DATETIME(ZPROCESS.ZTIMESTAMP+ 978307200, 'unixepoch') AS "TIMESTAMP",
	DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS FIRST TIMESTAMP",
	ZPROCESS.ZPROCNAME AS "PROCESS NAME",
	ZPROCESS.ZBUNDLENAME AS "BUNDLE ID",
	ZPROCESS.Z_PK AS "ZPROCESS TABLE ID"
	FROM ZPROCESS

[FileParser.ios.powerlog_wallet_card]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_wallet_card.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Wallet Authorized Status
query = 
	SELECT
	DATETIME(WALLETCARD_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	AUTHORIZEDSTATUS AS "AUTHORIZED STATUS",
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	WALLETCARD_ID AS "PLNFCAGENT_EVENTFORWARD_CARD TABLE ID"
	FROM
	(
	SELECT
	WALLETCARD_ID,
	WALLETCARD_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	AUTHORIZEDSTATUS,
	SYSTEM
	FROM
	(
	SELECT
	PLNFCAGENT_EVENTFORWARD_CARD.TIMESTAMP AS WALLETCARD_TIMESTAMP,
	AUTHORIZEDSTATUS,
	PLNFCAGENT_EVENTFORWARD_CARD.ID AS "WALLETCARD_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLNFCAGENT_EVENTFORWARD_CARD
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS WALLETCARD_STATE
	GROUP BY
	WALLETCARD_ID
	)

[FileParser.ios.powerlog_bluetooth_device_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_bluetooth_device_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Keeps track of Bluetooth state on device, discoverability, connection, etc.
query = 
	SELECT
	DATETIME(BLUETOOTHSTATE_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	CASE DEVICECONNECTABLE
	WHEN "0" THEN "NO"
	WHEN "1" THEN "YES"
	END AS "DEVICE CONNECTABLE",
	CASE DEVICECONNECTED
	WHEN "0" THEN "NO"
	WHEN "1" THEN "YES"
	END AS "DEVICE CONNECTED",
	CASE DEVICEDISCOVERABLE
	WHEN "0" THEN "NO"
	WHEN "1" THEN "YES"
	END AS "DEVICE DISCOVERABLE",
	CASE DEVICEPOWERED
	WHEN "0" THEN "NO"
	WHEN "1" THEN "YES"
	END AS "DEVICE POWERED",
	DATETIME(BLUETOOTHSTATE_TIMESTAMP, 'unixepoch') AS ORIGINAL_BLUETOOTHSTATE_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	BLUETOOTHSTATE_ID AS "PLBLUETOOTHAGENT_EVENTFORWARD_DEVICESTATE TABLE ID"
	FROM
	(
	SELECT
	BLUETOOTHSTATE_ID,
	BLUETOOTHSTATE_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	DEVICECONNECTABLE,
	DEVICECONNECTED,
	DEVICEDISCOVERABLE,
	DEVICEPOWERED,
	SYSTEM
	FROM
	(
	SELECT
	PLBLUETOOTHAGENT_EVENTFORWARD_DEVICESTATE.TIMESTAMP AS BLUETOOTHSTATE_TIMESTAMP,
	DEVICECONNECTABLE,
	DEVICECONNECTED,
	DEVICEDISCOVERABLE,
	DEVICEPOWERED,
	PLBLUETOOTHAGENT_EVENTFORWARD_DEVICESTATE.ID AS "BLUETOOTHSTATE_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLBLUETOOTHAGENT_EVENTFORWARD_DEVICESTATE
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS BLUETOOTHSTATE_STATE
	GROUP BY
	BLUETOOTHSTATE_ID
	)

[FileParser.ios.health_workout_general]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/health_workout_general.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Health Workout, these workouts do not have additional metadata associated. This query does not produce all workouts, just those without metadata.
query = 
	SELECT
	DATETIME(SAMPLES.START_DATE + 978307200, 'UNIXEPOCH') AS "START DATE",
	DATETIME(SAMPLES.END_DATE + 978307200, 'UNIXEPOCH') AS "END DATE",
	CASE WORKOUTS.ACTIVITY_TYPE
	WHEN 63 THEN "HIGH INTENSITY INTERVAL TRAINING (HIIT)"
	WHEN 37 THEN "INDOOR / OUTDOOR RUN"
	WHEN 3000 THEN "OTHER"
	WHEN 52 THEN "INDOOR / OUTDOOR WALK"
	WHEN 20 THEN "FUNCTIONAL TRAINING"
	WHEN 13 THEN "INDOOR CYCLE"
	WHEN 16 THEN "ELLIPTICAL"
	WHEN 35 THEN "ROWER"
	ELSE "UNKNOWN" || "-" || WORKOUTS.ACTIVITY_TYPE
	END "WORKOUT TYPE",
	WORKOUTS.DURATION / 60.00 AS "DURATION (IN MINUTES)",
	WORKOUTS.TOTAL_ENERGY_BURNED AS "CALORIES BURNED",
	WORKOUTS.TOTAL_DISTANCE AS "DISTANCE IN KILOMETERS",
	WORKOUTS.TOTAL_BASAL_ENERGY_BURNED AS "TOTAL BASEL ENERGY BURNED",
	CASE WORKOUTS.GOAL_TYPE
	WHEN 2 THEN "MINUTES"
	WHEN 0 THEN "OPEN"
	END "GOAL TYPE",
	WORKOUTS.GOAL AS "GOAL"
	FROM
	SAMPLES
	LEFT OUTER JOIN
	QUANTITY_SAMPLES
	ON SAMPLES.DATA_ID = QUANTITY_SAMPLES.DATA_ID
	LEFT OUTER JOIN
	UNIT_STRINGS
	ON QUANTITY_SAMPLES.ORIGINAL_UNIT = UNIT_STRINGS.ROWID
	LEFT OUTER JOIN
	CORRELATIONS
	ON SAMPLES.DATA_ID = CORRELATIONS.OBJECT
	LEFT OUTER JOIN
	METADATA_VALUES
	ON METADATA_VALUES.OBJECT_ID = SAMPLES.DATA_ID
	LEFT OUTER JOIN
	METADATA_KEYS
	ON METADATA_KEYS.ROWID = METADATA_VALUES.KEY_ID
	LEFT OUTER JOIN
	WORKOUTS
	ON WORKOUTS.DATA_ID = SAMPLES.DATA_ID
	WHERE
	WORKOUTS.ACTIVITY_TYPE NOT NULL AND KEY IS NULL

[FileParser.ios.query_predictions]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/query_predictions.csv"
	base.input.SQLiteReader
author = AlexisBrignoni/abrignoni.com/@alexisbrignoni
notes = Query_predictions.db
query = 
	select
	content,
	isSent,
	conversationId,
	id,
	uuid,
	datetime(creationTimestamp, "UNIXEPOCH", "LOCALTIME") as START
	from messages

[FileParser.ios.powerlog_wallet_transaction]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_wallet_transaction.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Wallet transaction status
query = 
	SELECT
	DATETIME(WALLETTRANSACTION_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	STATUS,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	WALLETTRANSACTION_ID AS "PLNFCAGENT_EVENTFORWARD_TRANSACTION TABLE ID"
	FROM
	(
	SELECT
	WALLETTRANSACTION_ID,
	WALLETTRANSACTION_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	STATUS,
	SYSTEM
	FROM
	(
	SELECT
	PLNFCAGENT_EVENTFORWARD_TRANSACTION.TIMESTAMP AS WALLETTRANSACTION_TIMESTAMP,
	STATUS,
	PLNFCAGENT_EVENTFORWARD_TRANSACTION.ID AS "WALLETTRANSACTION_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLNFCAGENT_EVENTFORWARD_TRANSACTION
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS WALLETTRANSACTION_STATE
	GROUP BY
	WALLETTRANSACTION_ID
	)

[FileParser.ios.powerlog_network_usage]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_network_usage.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	INTERFACE as "INTERFACE",
	DOWNBYTES AS "DOWN BYTES",
	UPBYTES AS "UP BYTES",
	ID AS "PLNETWORKAGENT_EVENTBACKWARD_CUMULATIVENETWORKUSAGE TABLE ID"
	FROM
	PLNETWORKAGENT_EVENTBACKWARD_CUMULATIVENETWORKUSAGE

[FileParser.ios.powerlog_location_tech_status]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_location_tech_status.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Technology used to determine location.
query = 
	SELECT
	DATETIME(LOCATIONTECH_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	ACCESSORY AS "ACCESSORY",
	CELL AS "CELL",
	GPS AS "GPS",
	GPS_COARSE AS "GPS COARSE",
	LAC AS "LAC",
	MCC AS "MCC",
	NMEA AS "NMEA",
	PIPELINE AS "PIPELINE",
	SKYHOOK AS "SKYHOOK",
	WIFI AS "WIFI",
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	LOCATIONTECH_ID AS "PLLOCATIONAGENT_EVENTFORWARD_TECHSTATUS TABLE ID"
	FROM
	(
	SELECT
	LOCATIONTECH_ID,
	LOCATIONTECH_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	ACCESSORY,
	CELL,
	GPS,
	GPS_COARSE,
	LAC,
	MCC,
	NMEA,
	PIPELINE,
	SKYHOOK,
	WIFI,
	SYSTEM
	FROM
	(
	SELECT
	PLLOCATIONAGENT_EVENTFORWARD_TECHSTATUS.TIMESTAMP AS LOCATIONTECH_TIMESTAMP,
	ACCESSORY,
	CELL,
	GPS,
	GPS_COARSE,
	LAC,
	MCC,
	NMEA,
	PIPELINE,
	SKYHOOK,
	WIFI,
	PLLOCATIONAGENT_EVENTFORWARD_TECHSTATUS.ID AS "LOCATIONTECH_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLLOCATIONAGENT_EVENTFORWARD_TECHSTATUS
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS LOCATIONTECH_STATE
	GROUP BY
	LOCATIONTECH_ID
	)

[FileParser.ios.locationd_cacheencryptedAB_wifilocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_wifilocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Wi-Fi Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MAC as "Base10 MAC",
	CHANNEL AS "CHANNEL",
	INFOMASK AS "INFOMASK",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	SCORE AS "SCORE",
	REACH AS "REACH",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM WifiLocation

[FileParser.ios.powerlog_backcamera_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_backcamera_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Records when back camera is in use.
query = 
	SELECT
	DATETIME(CAMERA_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	BUNDLEID AS BUNDLE_ID,
	CASE STATE
	WHEN "0" THEN "OFF"
	WHEN "1" THEN "ON"
	END AS STATE,
	DATETIME(CAMERA_TIMESTAMP, 'unixepoch') AS ORIGINAL_CAMERA_TIMESTAMP,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	CAMERA_ID AS "PLCAMERAAGENT_EVENTFORWARD_BACKCAMERA TABLE ID"
	FROM
	(
	SELECT
	BUNDLEID,
	CAMERA_ID,
	CAMERA_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) as max_id,
	SYSTEM,
	STATE
	FROM
	(
	SELECT
	PLCAMERAAGENT_EVENTFORWARD_BACKCAMERA.TIMESTAMP AS CAMERA_TIMESTAMP,
	PLCAMERAAGENT_EVENTFORWARD_BACKCAMERA.BUNDLEID,
	PLCAMERAAGENT_EVENTFORWARD_BACKCAMERA.STATE,
	PLCAMERAAGENT_EVENTFORWARD_BACKCAMERA.ID as "CAMERA_ID",
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM,
	BUNDLEID
	FROM
	PLCAMERAAGENT_EVENTFORWARD_BACKCAMERA
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS CAMERASTATE
	GROUP BY
	CAMERA_ID
	)

[FileParser.ios.powerlog_wifi_properties]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_wifi_properties.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Wi-Fi network connections
query = 
	SELECT
	DATETIME(WIFIPROPERTIES_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	CURRENTSSID,
	CURRENTCHANNEL,
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	WIFIPROPERTIES_ID AS "PLWIFIAGENT_EVENTBACKWARD_CUMULATIVEPROPERTIES TABLE ID"
	FROM
	(
	SELECT
	WIFIPROPERTIES_ID,
	WIFIPROPERTIES_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	CURRENTSSID,
	CURRENTCHANNEL,
	SYSTEM
	FROM
	(
	SELECT
	PLWIFIAGENT_EVENTBACKWARD_CUMULATIVEPROPERTIES.TIMESTAMP AS WIFIPROPERTIES_TIMESTAMP,
	CURRENTSSID,
	CURRENTCHANNEL,
	PLWIFIAGENT_EVENTBACKWARD_CUMULATIVEPROPERTIES.ID AS "WIFIPROPERTIES_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLWIFIAGENT_EVENTBACKWARD_CUMULATIVEPROPERTIES
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS WIFIPROPERTIES_STATE
	GROUP BY
	WIFIPROPERTIES_ID
	)

[FileParser.ios.routined_cacheencryptedB_location]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/routined_cacheencryptedB_location.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Routined Locations
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LOCATION

[FileParser.ios.locationd_cacheencryptedAB_wifilocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_wifilocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd WiFi Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MAC AS "MAC",
	CHANNEL AS "CHANNEL",
	HIDDEN AS "HIDDEN",
	RSSI AS "RSSI",
	AGE AS "AGE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	MOTIONVEHICLECONNECTEDSTATECHANGED AS "MOTION VEHICLE CONNECTED STATE CHANGED",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM WifiLocationHarvest

[FileParser.ios.powerlog_volume_level]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_volume_level.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = 
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	VOLUME,
	CASE MUTED
	WHEN "0" THEN "NO"
	WHEN "1" THEN "YES"
	END "MUTED",
	ID AS "PLAUDIOAGENT_EVENTFORWARD_OUTPUT TABLE ID"
	FROM
	PLAUDIOAGENT_EVENTFORWARD_OUTPUT

[FileParser.ios.locationd_cacheencryptedAB_cmdacelllocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_cmdacelllocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd CDMA Cell Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	ALTITUDE AS "ALTITUDE",
	KTABLECOLUMNMCC AS "MCC",
	MNC AS "MNC",
	SID AS "SID",
	NID AS "NID",
	BSID AS "BSID",
	BSLATITUDE AS "BSLATITUDE",
	BSLONGITUDE AS "BSLONGITUDE",
	ZONEID AS "ZONE ID",
	SECTORID AS "SECTOR ID",
	SECTORLATITUDE AS "SECTOR LATITUDE",
	SECTORLONGITUDE AS "SECTOR LONGITUDE",
	BANDCLASS AS "BAND CLASS",
	RAT AS "RAT",
	CELLTYPE AS "CELL TYPE",
	PNOFFSET AS "PN OFFSET",
	CHANNEL AS "CHANNEL",
	OPERATOR AS "OPERATOR",
	BUNDLEID AS "BUNDLE ID",
	LTMOFFSET AS "LTM OFFSET",
	DAYLIGHTSAVINGS AS "DAYLIGHT SAVINGS",
	RSCP AS "RSCP",
	ECN0 AS "ECN0",
	DERIVEDMCC AS "DERIVED MCC",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	MOTIONVEHICLECONNECTEDSTATECHANGED AS "MOTION VEHICLE CONNECTED STATE CHANGED",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CdmaCellLocationHarvest

[FileParser.ios.health_workout_indoor]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/health_workout_indoor.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Health Indoor Workout
query = 
	SELECT
	DATETIME(SAMPLES.START_DATE + 978307200, 'UNIXEPOCH') AS "START DATE",
	DATETIME(SAMPLES.END_DATE + 978307200, 'UNIXEPOCH') AS "END DATE",
	CASE WORKOUTS.ACTIVITY_TYPE
	WHEN 63 THEN "HIGH INTENSITY INTERVAL TRAINING (HIIT)"
	WHEN 37 THEN "INDOOR / OUTDOOR RUN"
	WHEN 3000 THEN "OTHER"
	WHEN 52 THEN "INDOOR / OUTDOOR WALK"
	WHEN 20 THEN "FUNCTIONAL TRAINING"
	WHEN 13 THEN "INDOOR CYCLE"
	WHEN 16 THEN "ELLIPTICAL"
	WHEN 35 THEN "ROWER"
	ELSE "UNKNOWN" || "-" || WORKOUTS.ACTIVITY_TYPE
	END "WORKOUT TYPE",
	WORKOUTS.DURATION / 60.00 AS "DURATION (IN MINUTES)",
	WORKOUTS.TOTAL_ENERGY_BURNED AS "CALORIES BURNED",
	WORKOUTS.TOTAL_DISTANCE AS "DISTANCE IN KILOMETERS",
	WORKOUTS.TOTAL_BASAL_ENERGY_BURNED AS "TOTAL BASEL ENERGY BURNED",
	CASE WORKOUTS.GOAL_TYPE
	WHEN 2 THEN "MINUTES"
	WHEN 0 THEN "OPEN"
	END "GOAL TYPE"
	FROM
	SAMPLES
	LEFT OUTER JOIN
	METADATA_VALUES
	ON METADATA_VALUES.OBJECT_ID = SAMPLES.DATA_ID
	LEFT OUTER JOIN
	METADATA_KEYS
	ON METADATA_KEYS.ROWID = METADATA_VALUES.KEY_ID
	LEFT OUTER JOIN
	WORKOUTS
	ON WORKOUTS.DATA_ID = SAMPLES.DATA_ID
	WHERE
	WORKOUTS.ACTIVITY_TYPE NOT NULL AND KEY IS "HKIndoorWorkout"

[FileParser.ios.locationd_cacheencryptedAB_celllocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_celllocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Cell Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	LAC AS "LAC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PSC AS "PSC",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CELLLOCATION

[FileParser.ios.sms_chat_message_read]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/sms_chat_message_read.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = SMS and Chat Messages, when the message was read.
query = 
	SELECT
	CASE
	WHEN LENGTH(MESSAGE.DATE)=18 THEN DATETIME(MESSAGE.DATE/1000000000+978307200,'UNIXEPOCH')
	WHEN LENGTH(MESSAGE.DATE)=9 THEN DATETIME(MESSAGE.DATE + 978307200,'UNIXEPOCH')
	ELSE "N/A"
	END "MESSAGE DATE",
	CASE
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=18 THEN DATETIME(MESSAGE.DATE_DELIVERED/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=9 THEN DATETIME(MESSAGE.DATE_DELIVERED+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE DELIVERED",
	CASE
	WHEN LENGTH(MESSAGE.DATE_READ)=18 THEN DATETIME(MESSAGE.DATE_READ/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_READ)=9 THEN DATETIME(MESSAGE.DATE_READ+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE READ",
	MESSAGE.TEXT as "MESSAGE",
	HANDLE.ID AS "CONTACT ID",
	MESSAGE.SERVICE AS "SERVICE",
	MESSAGE.ACCOUNT AS "ACCOUNT",
	MESSAGE.IS_DELIVERED AS "IS DELIVERED",
	MESSAGE.IS_FROM_ME AS "IS FROM ME",
	ATTACHMENT.FILENAME AS "FILENAME",
	ATTACHMENT.MIME_TYPE AS "MIME TYPE",
	ATTACHMENT.TRANSFER_NAME AS "TRANSFER TYPE",
	ATTACHMENT.TOTAL_BYTES AS "TOTAL BYTES"
	FROM MESSAGE
	LEFT OUTER JOIN MESSAGE_ATTACHMENT_JOIN ON MESSAGE.ROWID = MESSAGE_ATTACHMENT_JOIN.MESSAGE_ID
	LEFT OUTER JOIN ATTACHMENT ON MESSAGE_ATTACHMENT_JOIN.ATTACHMENT_ID = ATTACHMENT.ROWID
	LEFT OUTER JOIN HANDLE ON MESSAGE.HANDLE_ID = HANDLE.ROWID
	WHERE "DATE READ" IS NOT "N/A"

[FileParser.ios.locationd_cacheencryptedAB_locationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_locationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	TRIPID AS "TRIPID",
	MCC AS "MCC",
	MNC AS "MNC",
	RAT AS  "RAT",
	CONTEXT AS "CONTEXT",
	CONFIDENCE AS "CONFIDENCE",
	BUNDLEID AS "BUNDLE ID",
	BUNDLEIDS AS "BUNDLE IDS",
	ALTITUDE AS "ALTITUDE",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	MOTIONVEHICLECONNECTEDSTATECHANGED AS "MOTION VEHICLE CONNECTED STATE CHANGED",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LocationHarvest

[FileParser.ios.powerlog_app_info]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_app_info.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Get a listing of applications and associated data (app name, executable name, bundle ID, app version, app type and deletion date/status). Not really a log per se, but a good listing of application information. App Types: 1="Background iOS Service", 3=iOS Native Apps, 4=3rd Party Apps
query = 
	SELECT
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	APPNAME AS "APP NAME",
	APPBUNDLEID AS "BUNDLE ID",
	CASE APPDELETEDDATE
	WHEN 0 THEN "NOT DELETED"
	ELSE DATETIME(APPDELETEDDATE, 'unixepoch')
	END "APP DELETED DATE",
	ID AS "PLAPPLICATIONAGENT_EVENTNONE_ALLAPPS TABLE ID"
	FROM
	PLAPPLICATIONAGENT_EVENTNONE_ALLAPPS

[FileParser.ios.powerlog_app_deletion]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_app_deletion.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Applications that have been recently deleted.
query = 
	SELECT
	DATETIME(APPDELETEDDATE, 'unixepoch') AS "APP DELETED DATE",
	DATETIME(TIMESTAMP, 'unixepoch') AS TIMESTAMP,
	APPNAME AS "APP NAME",
	APPBUNDLEID AS "BUNDLE ID",
	ID AS "PLAPPLICATIONAGENT_EVENTNONE_ALLAPPS TABLE ID"
	FROM
	PLAPPLICATIONAGENT_EVENTNONE_ALLAPPS
	WHERE
	APPDELETEDDATE > 0

[FileParser.ios.aggregate_dictionary_scalars]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/aggregate_dictionary_scalars.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Keeping track of various values on a per-day basis.
query = 
	SELECT
	KEY AS "KEY",
	VALUE AS "VALUE",
	DATE(DAYSSINCE1970*86400, 'unixepoch') AS DAY
	FROM
	SCALARS

[FileParser.ios.locationd_cacheencryptedAB_ltecelllocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_ltecelllocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd LTE Cell Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PID as "PID",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LteCellLocation

[FileParser.ios.locationd_cacheencryptedAB_wtwlocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_wtwlocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd WTW Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MAC AS "MAC",
	CHANNEL AS "CHANNEL",
	HIDDEN AS "HIDDEN",
	RSSI AS "RSSI",
	AGE AS "AGE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	MOTIONVEHICLECONNECTEDSTATECHANGED AS "MOTION VEHICLE CONNECTED STATE CHANGED",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM WTWLocationHarvest

[FileParser.ios.powerlog_accessory_connection]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/powerlog_accessory_connection.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Accessory Connections - Accessories may be bluetooth devices like headphones or connections to devices like CarPlay enabled vehicles.
query = 
	SELECT
	DATETIME(ACCESSORYCONNECTION_TIMESTAMP + SYSTEM, 'unixepoch') AS ADJUSTED_TIMESTAMP,
	ACCESSORYUSAGETIMEINSECONDS AS "ACCESSORY USAGE TIME IN SECONDS",
	DATETIME(IAPAPPACCESSORYCONNECTIONTIMEINSECKEY + SYSTEM, 'unixepoch') AS "CONNECTION TIME (ADJ)",
	CASE ISCONNECTED
	WHEN '0' THEN 'DISCONNECTED'
	WHEN '1' THEN 'CONNECTED'
	END "CONNECTION STATUS",
	DATETIME(TIME_OFFSET_TIMESTAMP, 'unixepoch') AS OFFSET_TIMESTAMP,
	SYSTEM AS TIME_OFFSET,
	ACCESSORYCONNECTION_ID AS "PLXPCAGENT_EVENTFORWARD_ACCESSORY TABLE ID"
	FROM
	(
	SELECT
	ACCESSORYCONNECTION_ID,
	ACCESSORYCONNECTION_TIMESTAMP,
	TIME_OFFSET_TIMESTAMP,
	MAX(TIME_OFFSET_ID) AS MAX_ID,
	ACCESSORYUSAGETIMEINSECONDS,
	IAPAPPACCESSORYCONNECTIONTIMEINSECKEY,
	ISCONNECTED,
	SYSTEM
	FROM
	(
	SELECT
	PLXPCAGENT_EVENTFORWARD_ACCESSORY.TIMESTAMP AS ACCESSORYCONNECTION_TIMESTAMP,
	ACCESSORYUSAGETIMEINSECONDS,
	IAPAPPACCESSORYCONNECTIONTIMEINSECKEY,
	ISCONNECTED,
	PLXPCAGENT_EVENTFORWARD_ACCESSORY.ID AS "ACCESSORYCONNECTION_ID" ,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.TIMESTAMP AS TIME_OFFSET_TIMESTAMP,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.ID AS TIME_OFFSET_ID,
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET.SYSTEM
	FROM
	PLXPCAGENT_EVENTFORWARD_ACCESSORY
	LEFT JOIN
	PLSTORAGEOPERATOR_EVENTFORWARD_TIMEOFFSET
	)
	AS ACCESSORYCONNECTION_STATE
	GROUP BY
	ACCESSORYCONNECTION_ID
	)

[FileParser.ios.coreduetd_device_airplane_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/coreduetd_device_airplane_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Airplane Mode
query = 
	SELECT
	CASE ZAIRPLANEMODEON
	WHEN "0" THEN "OFF"
	WHEN "1" THEN "ON"
	END "AIRPLANE MODE",
	DATETIME(ZCREATIONDATE+978307200,"unixepoch") as "CREATE TIME",
	TIME(ZLOCALTIME,"unixepoch") as "LOCAL DEVICE TIME",
	TIME(ZCREATIONDATE-ZLOCALTIME,"unixepoch") as "TIME ZONE"
	FROM ZCDDMAIRPLANEMODEEVENT

[ApolloProject.FileParser]
inherits = base.directory.FileParser
parsers = (.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_audio_routing
	(.*/healthdb_secure.sqlite$$) FileParser.ios.health_heart_rate
	(.*/CallHistory.storedata$$) FileParser.ios.call_history
	(.*/sms.db$$) FileParser.ios.sms_chat_message_delivered
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_device_telephony_registration
	(.*/ADDataStore.sqlitedb$$) FileParser.ios.aggregate_dictionary_distributed_keys
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_display_brightness
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_incallservice
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_battery_level
	(.*/DataUsage.sqlite$$)|(.*/DataUsage-watch.sqlite$$) FileParser.ios.datausage_zprocess
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_video
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_timezone
	(.*/cache_encryptedB.db$$) FileParser.ios.routined_cacheencryptedB_hint
	(.*/History.db$$) FileParser.ios.safari_history
	(.*/coreduetdClassD.db$$) FileParser.ios.coreduetdclassd_device_plugin_state
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_device_telephony_activity
	(.*/cache_encryptedC.db$$) FileParser.ios.locationd_cacheencryptedC_stepcounthistory
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_scdmacelllocation
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_process_data_usage
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_paired_device_config
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_app_usage
	(.*/netusage.sqlite$$) FileParser.ios.netusage_zliveusage
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_app_audio
	(.*/healthdb_secure.sqlite$$) FileParser.ios.health_flights
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_passharvest
	(.*/interactionC.db$$) FileParser.ios.interaction_contact_interactions
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_device_lock_state
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_location_client_status
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_ids_messages
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_device_screen
	(.*/coreduetd.db$$) FileParser.ios.coreduetd_device_lock_state
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_device_volume
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_celllocationlocal
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_appharvest
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_frontcamera_state
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_cdmacelllocation
	(.*/cache_encryptedC.db$$) FileParser.ios.locationd_cacheencryptedC_motionstatehistory
	(.*/healthdb_secure.sqlite$$) FileParser.ios.health_stood_up
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_app_usage_by_hour
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_indoorlocationharvest
	(.*/cache_encryptedC.db$$) FileParser.ios.locationd_cacheencryptedC_nataliehistory
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/$$) FileParser.ios.locationd_cacheencryptedAB_ltecelllocationharvest
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_torch_state
	(.*/DataUsage.sqlite$$)|(.*/DataUsage-watch.sqlite$$) FileParser.ios.datausage_zliveusage
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_ltecelllocationlocal
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_pressurelocationharvest
	(.*/healthdb_secure.sqlite$$) FileParser.ios.health_steps
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_push_message_received
	(.*/healthdb_secure.sqlite$$) FileParser.ios.health_distance
	(.*/sms.db$$) FileParser.ios.sms_chat
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_device_screen_autolock
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_airdrop
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_battery_level_ui
	(.*/netusage.sqlite$$) FileParser.ios.netusage_zliverouteperf
	(.*/healthdb_secure.sqlite$$) FileParser.ios.health_weight
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_celllocationharvest
	(.*/netusage.sqlite$$) FileParser.ios.netusage_zprocess
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_wallet_card
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_bluetooth_device_state
	(.*/healthdb_secure.sqlite$$) FileParser.ios.health_workout_general
	(.*/query_predictions.db$$) FileParser.ios.query_predictions
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_wallet_transaction
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_network_usage
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_location_tech_status
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_wifilocation
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_backcamera_state
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_wifi_properties
	(.*/cache_encryptedB.db$$) FileParser.ios.routined_cacheencryptedB_location
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_wifilocationharvest
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_volume_level
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_cmdacelllocationharvest
	(.*/healthdb_secure.sqlite$$) FileParser.ios.health_workout_indoor
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_celllocation
	(.*/sms.db$$) FileParser.ios.sms_chat_message_read
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_locationharvest
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_app_info
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_app_deletion
	(.*/ADDataStore.sqlitedb$$) FileParser.ios.aggregate_dictionary_scalars
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_ltecelllocation
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_wtwlocationharvest
	(.*/CurrentPowerlog.PLSQL$$) FileParser.ios.powerlog_accessory_connection
	(.*/coreduetd.db$$) FileParser.ios.coreduetd_device_airplane_state

