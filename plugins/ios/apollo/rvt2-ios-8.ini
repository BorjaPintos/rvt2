; AUTOMATICALLY GENERATED FROM THE APOLLO PROJECT USING apollo2rvt2.py
; https://github.com/mac4n6/APOLLO.git

[FileParser.ios.call_history]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/call_history.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Call History
query = 
	SELECT
	CAST(ZADDRESS AS TEXT) AS "ADDRESS",
	ZANSWERED AS "WAS ANSWERED",
	ZCALLTYPE AS "CALL TYPE",
	ZORIGINATED AS "ORIGINATED",
	ZDURATION AS "DURATION (IN SECONDS)",
	ZISO_COUNTRY_CODE as "ISO COUNTY CODE",
	DATETIME(ZDATE+978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM ZCALLRECORD

[FileParser.ios.sms_chat_message_delivered]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/sms_chat_message_delivered.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = SMS and Chat Messages, when the message was delivered.
query = 
	SELECT
	CASE
	WHEN LENGTH(MESSAGE.DATE)=18 THEN DATETIME(MESSAGE.DATE/1000000000+978307200,'UNIXEPOCH')
	WHEN LENGTH(MESSAGE.DATE)=9 THEN DATETIME(MESSAGE.DATE + 978307200,'UNIXEPOCH')
	ELSE "N/A"
	END "DATE",
	CASE
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=18 THEN DATETIME(MESSAGE.DATE_DELIVERED/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=9 THEN DATETIME(MESSAGE.DATE_DELIVERED+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE DELIVERED",
	CASE
	WHEN LENGTH(MESSAGE.DATE_READ)=18 THEN DATETIME(MESSAGE.DATE_READ/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_READ)=9 THEN DATETIME(MESSAGE.DATE_READ+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE READ",
	MESSAGE.TEXT as "MESSAGE",
	HANDLE.ID AS "CONTACT ID",
	MESSAGE.SERVICE AS "SERVICE",
	MESSAGE.ACCOUNT AS "ACCOUNT",
	MESSAGE.IS_DELIVERED AS "IS DELIVERED",
	MESSAGE.IS_FROM_ME AS "IS FROM ME",
	ATTACHMENT.FILENAME AS "FILENAME",
	ATTACHMENT.MIME_TYPE AS "MIME TYPE",
	ATTACHMENT.TRANSFER_NAME AS "TRANSFER TYPE",
	ATTACHMENT.TOTAL_BYTES AS "TOTAL BYTES"
	FROM MESSAGE
	LEFT OUTER JOIN MESSAGE_ATTACHMENT_JOIN ON MESSAGE.ROWID = MESSAGE_ATTACHMENT_JOIN.MESSAGE_ID
	LEFT OUTER JOIN ATTACHMENT ON MESSAGE_ATTACHMENT_JOIN.ATTACHMENT_ID = ATTACHMENT.ROWID
	LEFT OUTER JOIN HANDLE ON MESSAGE.HANDLE_ID = HANDLE.ROWID
	WHERE "DATE DELIVERED" IS NOT "N/A"

[FileParser.ios.aggregate_dictionary_distributed_keys]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/aggregate_dictionary_distributed_keys.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Keeping track of various values on a per-day basis.
query = 
	SELECT
	DISTRIBUTIONKEYS.KEY AS "KEY",
	DISTRIBUTIONVALUES.VALUE AS "VALUE",
	DISTRIBUTIONVALUES.SECONDSINDAYOFFSET AS "SECONDS IN DAY OFFSET",
	DATE(DISTRIBUTIONKEYS.DAYSSINCE1970*86400, 'unixepoch') AS "DAY",
	DISTRIBUTIONVALUES.DISTRIBUTIONID AS "DISTRIBUTIONVALUES TABLE ID"
	FROM
	DISTRIBUTIONKEYS
	LEFT JOIN
	DISTRIBUTIONVALUES
	ON DISTRIBUTIONKEYS.ROWID = DISTRIBUTIONVALUES.DISTRIBUTIONID

[FileParser.ios.datausage_zprocess]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/datausage_zprocess.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Data Usage Processes/Bundle IDs.
query = 
	SELECT
	DATETIME(ZPROCESS.ZTIMESTAMP+ 978307200, 'unixepoch') AS "TIMESTAMP",
	DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS FIRST TIMESTAMP",
	ZPROCESS.ZPROCNAME AS "PROCESS NAME",
	ZPROCESS.ZBUNDLENAME AS "BUNDLE ID",
	ZPROCESS.Z_PK AS "ZPROCESS TABLE ID"
	FROM ZPROCESS

[FileParser.ios.routined_cacheencryptedB_hint]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/routined_cacheencryptedB_hint.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Routined Locations
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM HINT

[FileParser.ios.safari_history]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/safari_history.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Safari Browsing
query = 
	SELECT
	HISTORY_ITEMS.URL AS "URL",
	HISTORY_ITEMS.VISIT_COUNT AS "VISIT COUNT",
	HISTORY_VISITS.TITLE AS "TITLE",
	CASE HISTORY_VISITS.ORIGIN
	WHEN 1 THEN "ICLOUD SYNCED DEVICE"
	WHEN 0 THEN "VISTED FROM THIS DEVICE"
	END "ICLOUD SYNC",
	HISTORY_VISITS.LOAD_SUCCESSFUL AS "LOAD SUCCESSFUL",
	HISTORY_VISITS.REDIRECT_SOURCE AS "REDIRECT SOURCE",
	HISTORY_VISITS.REDIRECT_DESTINATION AS "REDIRECT DESTINATION",
	DATETIME(HISTORY_VISITS.VISIT_TIME+978307200,'UNIXEPOCH') AS "VISIT TIME",
	HISTORY_VISITS.ID AS "HISTORY ITEM ID"
	FROM HISTORY_ITEMS
	LEFT OUTER JOIN HISTORY_VISITS ON HISTORY_ITEMS.ID == HISTORY_VISITS.HISTORY_ITEM

[FileParser.ios.coreduetdclassd_device_plugin_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/coreduetdclassd_device_plugin_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Plugin State
query = 
	SELECT
	CASE ZCABLESTATE
	WHEN "0" THEN "Unplugged"
	WHEN "1" THEN "Plugged In"
	END "CABLE STATE",
	DATETIME(ZCREATIONDATE+978307200,'unixepoch') as "TIMESTAMP",
	TIME(ZCREATIONDATE-ZLOCALTIME,'unixepoch') as "TIME ZONE"
	FROM ZCDDMPLUGINEVENT

[FileParser.ios.locationd_cacheencryptedC_stepcounthistory]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedC_stepcounthistory.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Step Count History
query = 
	SELECT
	DATETIME(STARTTIME + 978307200, 'UNIXEPOCH') AS "START TIME",
	TIMESTAMP AS "MOVEMENT TIME",
	COUNT AS "COUNT",
	DISTANCE AS "DISTANCE",
	RAWDISTANCE AS "RAWDISTANCE",
	FLOORSASCENDED AS "FLOORS ASCENDED",
	FLOORSDESCENDED AS "FLOORS DESCENDED",
	STEPCOUNTHISTORY.ID AS "STEPCOUNTHISTORY TABLE ID"
	FROM STEPCOUNTHISTORY

[FileParser.ios.netusage_zliveusage]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/netusage_zliveusage.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Network Usage Traffic by Process.
query = 
	SELECT
	DATETIME(ZPROCESS.ZTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS TIMESTAMP",
	DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS FIRST TIMESTAMP",
	DATETIME(ZLIVEUSAGE.ZTIMESTAMP + 978307200, 'unixepoch') AS "LIVE USAGE TIMESTAMP",
	ZBUNDLENAME AS "BUNDLE ID",
	ZPROCNAME AS "PROCESS NAME",
	ZWIFIIN AS "WIFI IN",
	ZWIFIOUT AS "WIFI OUT",
	ZWWANIN AS "WWAN IN",
	ZWWANOUT AS "WWAN OUT",
	ZWIREDIN AS "WIRED IN",
	ZWIREDOUT AS "WIRED OUT",
	ZLIVEUSAGE.Z_PK AS "ZLIVEUSAGE TABLE ID"
	FROM ZLIVEUSAGE
	LEFT JOIN ZPROCESS ON ZPROCESS.Z_PK = ZLIVEUSAGE.ZHASPROCESS

[FileParser.ios.locationd_cacheencryptedAB_passharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_passharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Pass Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	PASSTYPEID AS "PASS TYPE ID",
	ASSOCIATEDSTOREIDS AS  "ASSOCIATED STORE IDS",
	PASSSOURCE AS "PASS SOURCE",
	AGE AS "AGE",
	SIG AS "SIG",
	CONFIDENCE AS "CONFIDENCE",
	ALTITUDE AS "ALTITUDE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM PassHarvest

[FileParser.ios.coreduetd_device_lock_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/coreduetd_device_lock_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Lock State
query = 
	SELECT
	CASE ZLOCKSTATE
	WHEN "0" THEN "Unlocked"
	WHEN "1" THEN "Locked"
	END "LOCK STATE",
	DATETIME(ZCREATIONDATE+978307200,"unixepoch") as "CREATE TIME",
	TIME(ZLOCALTIME,"unixepoch") as "LOCAL DEVICE TIME",
	TIME(ZCREATIONDATE-ZLOCALTIME,"unixepoch") as "TIME ZONE"
	FROM ZCDDMSCREENLOCKEVENT

[FileParser.ios.locationd_cacheencryptedAB_celllocationlocal]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_celllocationlocal.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Cell Location Local
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	LAC AS "LAC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PSC AS "PSC",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CELLLOCATIONLOCAL

[FileParser.ios.locationd_cacheencryptedAB_appharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_appharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd App Harvest Location
query = 
	SELECT
	BUNDLEID AS "BUNDLE ID",
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	ALTITUDE AS "ALTITUDE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	STATE AS "STATE",
	AGE AS "AGE",
	ROUTINEMODE AS "ROUTINE MODE",
	LOCATIONOFINTERESTTYPE AS "LOCATION OF INTEREST TYPE",
	HEX(SIG) AS "SIG (HEX)",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM AppHarvest

[FileParser.ios.locationd_cacheencryptedAB_cdmacelllocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_cdmacelllocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd CDMA Cell Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	SID AS "SID",
	NID AS "NID",
	BSID AS "BSID",
	ZONEID AS "ZONEID",
	BANDCLASS AS "BANDCLASS",
	CHANNEL AS "CHANNEL",
	PNOFFSET AS "PNOFFSET",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CdmaCellLocation

[FileParser.ios.locationd_cacheencryptedAB_indoorlocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_indoorlocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Indoor Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	CONFIDENCE AS "CONFIDENCE",
	BUNDLEID AS "BUNDLE ID",
	ALTITUDE AS "ALTITUDE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM IndoorLocationHarvest

[FileParser.ios.locationd_cacheencryptedAB_ltecelllocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_ltecelllocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd LTE Cell Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	TAC AS  "TAC",
	CI AS "CI",
	PID AS "PID",
	BANDINFO AS "BAND INFO",
	UARFCN AS "UARFCN",
	CONFIDENCE AS "CONFIDENCE",
	BUNDLEID AS "BUNDLE ID",
	RSCP AS "RSCP",
	ECN0 AS "ECN0",
	RSSI AS "RSSI",
	CELLLATITUDE AS "CELL LATITUTDE",
	CELLLONGITUDE AS "CELL LONGITUDE",
	OPERATOR AS "OPERATOR",
	ALTITUDE AS "ALTITUDE",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LteCellLocationHarvest

[FileParser.ios.datausage_zliveusage]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/datausage_zliveusage.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Data Usage Traffic by Process.
query = 
	SELECT
	DATETIME(ZLIVEUSAGE.ZTIMESTAMP + 978307200, 'unixepoch') AS "TIMESTAMP",
	DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS FIRST TIMESTAMP",
	DATETIME(ZPROCESS.ZTIMESTAMP+ 978307200, 'unixepoch') AS "PROCESS TIMESTAMP",
	ZPROCESS.ZPROCNAME AS "PROCESS NAME",
	ZPROCESS.ZBUNDLENAME AS "BUNDLE ID",
	ZLIVEUSAGE.ZWIFIIN AS "WIFI IN",
	ZLIVEUSAGE.ZWIFIOUT AS "WIFI OUT",
	ZLIVEUSAGE.ZWWANIN AS "WWAN IN",
	ZLIVEUSAGE.ZWWANOUT AS "WWAN OUT",
	ZLIVEUSAGE.Z_PK AS "ZLIVEUSAGE TABLE ID"
	FROM ZLIVEUSAGE
	LEFT JOIN ZPROCESS ON ZLIVEUSAGE.ZHASPROCESS = ZPROCESS.Z_PK

[FileParser.ios.locationd_cacheencryptedAB_ltecelllocationlocal]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_ltecelllocationlocal.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd LTE Cell Location Local
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PID as "PID",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LteCellLocationLocal

[FileParser.ios.sms_chat]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/sms_chat.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = SMS and Chat Messages
query = 
	SELECT
	CASE
	WHEN LENGTH(MESSAGE.DATE)=18 THEN DATETIME(MESSAGE.DATE/1000000000+978307200,'UNIXEPOCH')
	WHEN LENGTH(MESSAGE.DATE)=9 THEN DATETIME(MESSAGE.DATE + 978307200,'UNIXEPOCH')
	ELSE "N/A"
	END "MESSAGE DATE",
	CASE
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=18 THEN DATETIME(MESSAGE.DATE_DELIVERED/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=9 THEN DATETIME(MESSAGE.DATE_DELIVERED+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE DELIVERED",
	CASE
	WHEN LENGTH(MESSAGE.DATE_READ)=18 THEN DATETIME(MESSAGE.DATE_READ/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_READ)=9 THEN DATETIME(MESSAGE.DATE_READ+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE READ",
	MESSAGE.TEXT as "MESSAGE",
	HANDLE.ID AS "CONTACT ID",
	MESSAGE.SERVICE AS "SERVICE",
	MESSAGE.ACCOUNT AS "ACCOUNT",
	MESSAGE.IS_DELIVERED AS "IS DELIVERED",
	MESSAGE.IS_FROM_ME AS "IS FROM ME",
	ATTACHMENT.FILENAME AS "FILENAME",
	ATTACHMENT.MIME_TYPE AS "MIME TYPE",
	ATTACHMENT.TRANSFER_NAME AS "TRANSFER TYPE",
	ATTACHMENT.TOTAL_BYTES AS "TOTAL BYTES"
	FROM MESSAGE
	LEFT OUTER JOIN MESSAGE_ATTACHMENT_JOIN ON MESSAGE.ROWID = MESSAGE_ATTACHMENT_JOIN.MESSAGE_ID
	LEFT OUTER JOIN ATTACHMENT ON MESSAGE_ATTACHMENT_JOIN.ATTACHMENT_ID = ATTACHMENT.ROWID
	LEFT OUTER JOIN HANDLE ON MESSAGE.HANDLE_ID = HANDLE.ROWID

[FileParser.ios.netusage_zliverouteperf]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/netusage_zliverouteperf.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Network Usage Traffic by Network.
query = 
	SELECT
	DATETIME(ZLIVEROUTEPERF.ZTIMESTAMP + 978307200, 'unixepoch') AS "LIVEROUTEPREF TIMESTAMP",
	DATETIME(ZNETWORKATTACHMENT.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "FIRST NETWORK ATTACHMENT",
	DATETIME(ZNETWORKATTACHMENT.ZTIMESTAMP + 978307200, 'unixepoch') AS "NETWORK ATTACHMENT TIMESTAMP",
	CASE ZLIVEROUTEPERF.ZKIND
	WHEN 1 THEN "WIFI"
	WHEN 2 THEN "CELLULAR"
	END "NETWORK TYPE",
	ZLIVEROUTEPERF.ZBYTESIN AS "BYTES IN",
	ZLIVEROUTEPERF.ZBYTESOUT AS "BYTES OUT",
	ZLIVEROUTEPERF.ZPACKETSIN AS "PACKETS IN",
	ZLIVEROUTEPERF.ZPACKETSOUT AS "PACKETS OUT",
	ZLIVEROUTEPERF.ZCONNATTEMPTS AS "CONNECTION ATTEMPTS",
	ZLIVEROUTEPERF.ZCONNSUCCESSES AS "CONNECTION SUCCESSES",
	ZNETWORKATTACHMENT.ZIDENTIFIER AS "NETWORK IDENTIFIER",
	ZNETWORKATTACHMENT.ZISKNOWNGOOD AS "IS KNOWN GOOD",
	ZNETWORKATTACHMENT.ZOVERALLSTAYMEAN AS "OVERALL STAY MEAN (NETWORK ATTACHMENT)",
	ZNETWORKATTACHMENT.ZOVERALLSTAYVAR AS "OVERALL STAY VAR (NETWORK ATTACHMENT)",
	ZLIVEROUTEPERF.ZOVERALLSTAY AS "OVERALL STAY MEAN (LIVE ROUTE PERF)",
	ZLIVEROUTEPERF.ZOVERALLSTAYM2 AS "OVERALL STAY M2 (LIVE ROUTE PERF)",
	ZLIVEROUTEPERF.Z_PK AS "ZLIVEROUTEPERF TABLE ID"
	FROM ZLIVEROUTEPERF
	LEFT JOIN ZNETWORKATTACHMENT ON ZLIVEROUTEPERF.ZHASNETWORKATTACHMENT = ZNETWORKATTACHMENT.Z_PK

[FileParser.ios.locationd_cacheencryptedAB_celllocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_celllocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Cell Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	ALTITUDE AS "ALTITUDE",
	MCC AS "MCC",
	MNC AS "MNC",
	CI AS "CI",
	RSSI AS "RSSI",
	ARFCN AS "ARFCN",
	PSC AS "PSC",
	RSCP AS "RSCP",
	ECN0 AS "ECN0",
	RAT AS "RAT",
	OPERATOR AS "OPERATOR",
	TRANSMIT AS "TRANSMIT",
	BUNDLEID AS "BUNDLE ID",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CellLocationHarvest

[FileParser.ios.netusage_zprocess]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/netusage_zprocess.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Network Usage Processes/Bundle IDs
query = 
	SELECT
	DATETIME(ZPROCESS.ZTIMESTAMP+ 978307200, 'unixepoch') AS "TIMESTAMP",
	DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS "PROCESS FIRST TIMESTAMP",
	ZPROCESS.ZPROCNAME AS "PROCESS NAME",
	ZPROCESS.ZBUNDLENAME AS "BUNDLE ID",
	ZPROCESS.Z_PK AS "ZPROCESS TABLE ID"
	FROM ZPROCESS

[FileParser.ios.query_predictions]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/query_predictions.csv"
	base.input.SQLiteReader
author = AlexisBrignoni/abrignoni.com/@alexisbrignoni
notes = Query_predictions.db
query = 
	select
	content,
	isSent,
	conversationId,
	id,
	uuid,
	datetime(creationTimestamp, "UNIXEPOCH", "LOCALTIME") as START
	from messages

[FileParser.ios.locationd_cacheencryptedAB_wifilocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_wifilocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Wi-Fi Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MAC as "Base10 MAC",
	CHANNEL AS "CHANNEL",
	INFOMASK AS "INFOMASK",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	SCORE AS "SCORE",
	REACH AS "REACH",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM WifiLocation

[FileParser.ios.routined_cacheencryptedB_location]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/routined_cacheencryptedB_location.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Routined Locations
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LOCATION

[FileParser.ios.locationd_cacheencryptedAB_wifilocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_wifilocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd WiFi Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MAC AS "MAC",
	CHANNEL AS "CHANNEL",
	HIDDEN AS "HIDDEN",
	RSSI AS "RSSI",
	AGE AS "AGE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM WifiLocationHarvest

[FileParser.ios.locationd_cacheencryptedAB_cmdacelllocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_cmdacelllocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd CDMA Cell Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	ALTITUDE AS "ALTITUDE",
	KTABLECOLUMNMCC AS "MCC",
	MNC AS "MNC",
	SID AS "SID",
	NID AS "NID",
	BSID AS "BSID",
	BSLATITUDE AS "BSLATITUDE",
	BSLONGITUDE AS "BSLONGITUDE",
	ZONEID AS "ZONE ID",
	SECTORID AS "SECTOR ID",
	SECTORLATITUDE AS "SECTOR LATITUDE",
	SECTORLONGITUDE AS "SECTOR LONGITUDE",
	BANDCLASS AS "BAND CLASS",
	RAT AS "RAT",
	CELLTYPE AS "CELL TYPE",
	PNOFFSET AS "PN OFFSET",
	CHANNEL AS "CHANNEL",
	OPERATOR AS "OPERATOR",
	BUNDLEID AS "BUNDLE ID",
	LTMOFFSET AS "LTM OFFSET",
	DAYLIGHTSAVINGS AS "DAYLIGHT SAVINGS",
	RSCP AS "RSCP",
	ECN0 AS "ECN0",
	DERIVEDMCC AS "DERIVED MCC",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CdmaCellLocationHarvest

[FileParser.ios.locationd_cacheencryptedAB_celllocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_celllocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Cell Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	LAC AS "LAC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PSC AS "PSC",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM CELLLOCATION

[FileParser.ios.sms_chat_message_read]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/sms_chat_message_read.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = SMS and Chat Messages, when the message was read.
query = 
	SELECT
	CASE
	WHEN LENGTH(MESSAGE.DATE)=18 THEN DATETIME(MESSAGE.DATE/1000000000+978307200,'UNIXEPOCH')
	WHEN LENGTH(MESSAGE.DATE)=9 THEN DATETIME(MESSAGE.DATE + 978307200,'UNIXEPOCH')
	ELSE "N/A"
	END "MESSAGE DATE",
	CASE
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=18 THEN DATETIME(MESSAGE.DATE_DELIVERED/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_DELIVERED)=9 THEN DATETIME(MESSAGE.DATE_DELIVERED+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE DELIVERED",
	CASE
	WHEN LENGTH(MESSAGE.DATE_READ)=18 THEN DATETIME(MESSAGE.DATE_READ/1000000000+978307200,"UNIXEPOCH")
	WHEN LENGTH(MESSAGE.DATE_READ)=9 THEN DATETIME(MESSAGE.DATE_READ+978307200,"UNIXEPOCH")
	ELSE "N/A"
	END "DATE READ",
	MESSAGE.TEXT as "MESSAGE",
	HANDLE.ID AS "CONTACT ID",
	MESSAGE.SERVICE AS "SERVICE",
	MESSAGE.ACCOUNT AS "ACCOUNT",
	MESSAGE.IS_DELIVERED AS "IS DELIVERED",
	MESSAGE.IS_FROM_ME AS "IS FROM ME",
	ATTACHMENT.FILENAME AS "FILENAME",
	ATTACHMENT.MIME_TYPE AS "MIME TYPE",
	ATTACHMENT.TRANSFER_NAME AS "TRANSFER TYPE",
	ATTACHMENT.TOTAL_BYTES AS "TOTAL BYTES"
	FROM MESSAGE
	LEFT OUTER JOIN MESSAGE_ATTACHMENT_JOIN ON MESSAGE.ROWID = MESSAGE_ATTACHMENT_JOIN.MESSAGE_ID
	LEFT OUTER JOIN ATTACHMENT ON MESSAGE_ATTACHMENT_JOIN.ATTACHMENT_ID = ATTACHMENT.ROWID
	LEFT OUTER JOIN HANDLE ON MESSAGE.HANDLE_ID = HANDLE.ROWID
	WHERE "DATE READ" IS NOT "N/A"

[FileParser.ios.locationd_cacheencryptedAB_locationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_locationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	TRIPID AS "TRIPID",
	MCC AS "MCC",
	MNC AS "MNC",
	RAT AS  "RAT",
	CONTEXT AS "CONTEXT",
	CONFIDENCE AS "CONFIDENCE",
	BUNDLEID AS "BUNDLE ID",
	ALTITUDE AS "ALTITUDE",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LocationHarvest

[FileParser.ios.aggregate_dictionary_scalars]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/aggregate_dictionary_scalars.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Keeping track of various values on a per-day basis.
query = 
	SELECT
	KEY AS "KEY",
	VALUE AS "VALUE",
	DATE(DAYSSINCE1970*86400, 'unixepoch') AS DAY
	FROM
	SCALARS

[FileParser.ios.locationd_cacheencryptedAB_ltecelllocation]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_ltecelllocation.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd LTE Cell Location
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MCC AS "MCC",
	MNC AS "MNC",
	CI AS "CI",
	UARFCN AS "UARFCN",
	PID as "PID",
	ALTITUDE AS "ALTITUDE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM LteCellLocation

[FileParser.ios.locationd_cacheencryptedAB_wtwlocationharvest]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/locationd_cacheencryptedAB_wtwlocationharvest.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Locationd WTW Location Harvest
query = 
	SELECT
	LATITUDE || ", " || LONGITUDE AS "COORDINATES",
	MAC AS "MAC",
	CHANNEL AS "CHANNEL",
	HIDDEN AS "HIDDEN",
	RSSI AS "RSSI",
	AGE AS "AGE",
	SPEED AS "SPEED",
	COURSE AS "COURSE",
	CONFIDENCE AS "CONFIDENCE",
	MOTIONACTIVITYTYPE AS "MOTION ACTIVITY TYPE",
	MOTIONACTIVITYCONFIDENCE AS "MOTION ACTIVITY CONFIDENCE",
	HORIZONTALACCURACY AS "HORIZONTAL ACCURACY",
	VERTICALACCURACY AS "VERTICAL ACCURACY",
	LATITUDE AS "LATITUDE",
	LONGITUDE AS "LONGITUDE",
	DATETIME(TIMESTAMP + 978307200,'UNIXEPOCH') AS "TIMESTAMP"
	FROM WTWLocationHarvest

[FileParser.ios.coreduetd_device_airplane_state]
modules = 
	base.output.CSVSink file_exists=OVERWRITE outfile="${ios.common:iosdir}/apollo/coreduetd_device_airplane_state.csv"
	base.input.SQLiteReader
author = Sarah Edwards/mac4n6.com/@iamevltwin
notes = Airplane Mode
query = 
	SELECT
	CASE ZAIRPLANEMODEON
	WHEN "0" THEN "OFF"
	WHEN "1" THEN "ON"
	END "AIRPLANE MODE",
	DATETIME(ZCREATIONDATE+978307200,"unixepoch") as "CREATE TIME",
	TIME(ZLOCALTIME,"unixepoch") as "LOCAL DEVICE TIME",
	TIME(ZCREATIONDATE-ZLOCALTIME,"unixepoch") as "TIME ZONE"
	FROM ZCDDMAIRPLANEMODEEVENT

[ApolloProject.FileParser]
inherits = base.directory.FileParser
parsers = (.*/CallHistory.storedata$$) FileParser.ios.call_history
	(.*/sms.db$$) FileParser.ios.sms_chat_message_delivered
	(.*/ADDataStore.sqlitedb$$) FileParser.ios.aggregate_dictionary_distributed_keys
	(.*/DataUsage.sqlite$$)|(.*/DataUsage-watch.sqlite$$) FileParser.ios.datausage_zprocess
	(.*/cache_encryptedB.db$$) FileParser.ios.routined_cacheencryptedB_hint
	(.*/History.db$$) FileParser.ios.safari_history
	(.*/coreduetdClassD.db$$) FileParser.ios.coreduetdclassd_device_plugin_state
	(.*/cache_encryptedC.db$$) FileParser.ios.locationd_cacheencryptedC_stepcounthistory
	(.*/netusage.sqlite$$) FileParser.ios.netusage_zliveusage
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_passharvest
	(.*/coreduetd.db$$) FileParser.ios.coreduetd_device_lock_state
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_celllocationlocal
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_appharvest
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_cdmacelllocation
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_indoorlocationharvest
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/$$) FileParser.ios.locationd_cacheencryptedAB_ltecelllocationharvest
	(.*/DataUsage.sqlite$$)|(.*/DataUsage-watch.sqlite$$) FileParser.ios.datausage_zliveusage
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_ltecelllocationlocal
	(.*/sms.db$$) FileParser.ios.sms_chat
	(.*/netusage.sqlite$$) FileParser.ios.netusage_zliverouteperf
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_celllocationharvest
	(.*/netusage.sqlite$$) FileParser.ios.netusage_zprocess
	(.*/query_predictions.db$$) FileParser.ios.query_predictions
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_wifilocation
	(.*/cache_encryptedB.db$$) FileParser.ios.routined_cacheencryptedB_location
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_wifilocationharvest
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_cmdacelllocationharvest
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_celllocation
	(.*/sms.db$$) FileParser.ios.sms_chat_message_read
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_locationharvest
	(.*/ADDataStore.sqlitedb$$) FileParser.ios.aggregate_dictionary_scalars
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$)|(.*/lockCache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_ltecelllocation
	(.*/cache_encryptedB.db$$)|(.*/cache_encryptedA.db$$) FileParser.ios.locationd_cacheencryptedAB_wtwlocationharvest
	(.*/coreduetd.db$$) FileParser.ios.coreduetd_device_airplane_state

