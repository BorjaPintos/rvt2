[ai]
description: This plugin uses artificial intelligence techniques to classify data.
  Installation of extra dependencies for prediction models is required. See INSTALL.md
pythonpath:
    /usr/lib/python3/dist-packages
    /usr/local/lib/python3.7/dist-packages
    ${userhome}/.local/lib/python3.7/site-packages
    ${plugindir}/NudeNet
; will be filled automatically after loading the plugin
plugindir:

[ai.classify]
description: classify images using a model or Inception V3.
help_section: ai
modules:
    base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
    ai.classify.AIClassify model='{model}' modelsdir='{modelsdir}' models_conf='{models_conf}' threshold='{threshold}' min_threshold='{min_threshold}' max_items='{max_items}'
    base.directory.DirectoryFilter filter='{filter}'
    base.directory.MirrorOptions
default_params: {
    'outfile':'${outputdir}/classify/classification.json',
    'model':'${ai.classify.AIClassify:model}',
    'modelsdir':'${ai.classify.AIClassify:modelsdir}',
    'models_conf':'${ai.classify.AIClassify:models_conf}',
    'threshold':'${ai.classify.AIClassify:threshold}',
    'min_threshold':'${ai.classify.AIClassify:min_threshold}',
    'max_items':'${ai.classify.AIClassify:max_items}',
    'filter':'image'}
params_help: {
    'path': 'Path to the directory where images to process are stored',
    'outfile': 'JSON file where results will be stored',
    'model': 'AI model to process images',
    'modelsdir': 'Directory where model packages are installed',
    'models_conf': 'Configuration file with model specific parameters',
    'threshold': 'Discrimination percentage (between 0 and 1). The higher it is set less hits it will match',
    'min_threshold': 'Minimum percentatge for a category to be accepted as a possible match',
    'max_items': 'Maximum number of categories to include in resulting match',
    'filter': 'List of file categories to parse. If not provided, parse all files. Categories are section names to be read.'}
path: ${sourcedir}/mnt

[ai.nudenet]
description: Call `ai.nudenet.images` and `ai.nudenet.videos`.
    The params are passed to these modules.
jobs:
    ai.nudenet.images outfile="{outfile}" indexerout="{indexerout}"
    ai.nudenet.videos outfile="{outfile}" indexerout="{indexerout}"
default_params: {
    'outfile':'${plugins.common:analysisdir}/iaclassify.nudenet.json',
    'indexerout':'${outputdir}/indexer/${source}.nudenet.json'}
path: ${sourcedir}/mnt

[ai.nudenet.images]
description: classify images in a directory as safe/unsafe using NudeNet model.
help_section: ai
modules:
    ; convert output for ElasticSearch
    base.output.JSONSink file_exists=APPEND outfile='{indexerout}'
    indexer.elastic.ElasticSearchAdapter operation=update
    base.mutations.CommonFields disabled=False generate_id=True
    ; save main output
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    ; classigy images
    ; use this module instead of directory filter to take advantage of alloc_files
    ;plugins.common.FilterAllocFiles file_category="image"
    base.directory.DirectoryFilter filter=image
    ai.NudeNetClassify
default_params: {
    'outfile':'${plugins.common:analysisdir}/aiclassify.nudenet.json',
    'indexerout':'${outputdir}/indexer/${source}.nudenet.json'}
params_help: {
    'path': 'The path to the directory which contains images to classify',
    'outfile': 'The output with the result of the classification. There is also an additional output: `indexerout`.',
    'indexerout': 'The output of the job, ready to be indexed with `indexer.save` and update existing documents.'}
path: ${sourcedir}/mnt

[ai.nudenet.videos]
description: classify videos in a directory as safe/unsafe using NudeNet model.
help_section: ai
modules:
    ; convert output for ElasticSearch
    base.output.JSONSink file_exists=APPEND outfile='{indexerout}'
    indexer.elastic.ElasticSearchAdapter operation=update
    base.mutations.CommonFields disabled=False generate_id=True
    ; save main output
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    ; classify videos
    ; use this module instead of directory filter to take advantage of alloc_files
    plugins.common.FilterAllocFiles file_category="video"
    ; base.directory.DirectoryFilter filter=video
    ai.NudeNetClassifyVideo
    ai.GenerateVideoSnapshots outdir="{previewdir}"
default_params: {
    'outfile':'${plugins.common:analysisdir}/aiclassify.nudenet.json',
    'previewdir':'${plugins.common:auxdir}/videosnapshots',
    'indexerout':'${outputdir}/indexer/${source}.nudenet.json'}
params_help: {
    'path': 'The path to the directory which contains videos to classify.',
    'outfile': 'The output with the result of the classification. There is also an additional output: `indexerout`.',
    'previewdir': 'Save video thumbnails in this directory',
    'indexerout': 'The output of the job, ready to be indexed with `indexer.save` and update existing documents.'}
path: ${sourcedir}/mnt

[ai.video.snapshots]
description: create snapshots from all videos in a disk and save them in a directory.
help_section: ai
modules:
    plugins.common.FilterAllocFiles file_category="video"
    ai.GenerateVideoSnapshots outdir="{outdir}"
default_params: {
    'outdir':'${plugins.common:auxdir}/videosnapshots'}
params_help: {
    'path': 'The path to the directory which contains images to make thumbnails.',
    'outdir': 'The output with the thumbnails.'}
path: ${sourcedir}/mnt
